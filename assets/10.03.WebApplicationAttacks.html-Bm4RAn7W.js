import{_ as i,c as n,b as a,a as e,d as t,o}from"./app-6Mc17HFZ.js";const r={};function l(c,s){return o(),n("div",null,s[0]||(s[0]=[a("<p>As you study this section, answer the following questions:</p><ul><li> What are the common forms of web application attacks? </li><li> How do you mitigate replay attacks? </li><li> What are some methods to prevent driver manipulation? </li><li> How does SSL stripping work? </li></ul><p>In this section, you will learn to:</p><ul><li> Perform an SQL injection attack. </li><li> Prevent cross-site scripting. </li><li> Exploit SQL on a webpage. </li></ul><p>The key terms for this section include:</p>",5),e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"},"Term"),e("th",{scope:"col",class:"fw-bold"},"Definition")])]),e("tbody",null,[e("tr",null,[e("td",null,"Privilege escalation"),e("td",null," The exploitation of a misconfiguration, a bug, or design flaw to gain unauthorized access to resources. ")]),e("tr",null,[e("td",null,"Pointer/object dereferencing"),e("td",null," An attack that retrieves a value stored in memory that can be exploited through a NULL pointer dereference. ")]),e("tr",null,[e("td",null,"Buffer overflow"),e("td",null," An attack that exploits an operating system or an application that does not properly enforce boundaries for inputting data such as the amount of data or the type of data. ")]),e("tr",null,[e("td",null,"Resource exhaustion"),e("td",null," An attack that focuses on depleting the resources of a network to create a denial of service to legitimate users. ")]),e("tr",null,[e("td",null,"Memory leak"),e("td",null," A leak that happens when dynamic memory is allocated in a program, but no pointers are connected to it causing it to never be returned when requested. ")]),e("tr",null,[e("td",null,"Race conditions"),e("td",null," A sequence of events with dependencies that a system is programmed to run in a certain order which can lead to a time-of-check to time-of-use bug vulnerability. ")]),e("tr",null,[e("td",null,"Error handling"),e("td",null," The procedures in a program that respond to irregular input or conditions. ")]),e("tr",null,[e("td",null,"Improper input handling"),e("td",null," The lack of validation, sanitization, filtering, decoding, or encoding of input data. ")]),e("tr",null,[e("td",null,"Replay attack"),e("td",null," An attack that happens when network traffic is intercepted by an unauthorized person who then delays or replays the communication to its original receiver, acting as the original sender. The original sender is unaware of this occurrence. ")]),e("tr",null,[e("td",null,"Pass the hash"),e("td",null," An attack in which an attacker obtains a hashed password and uses it to gain unauthorized access. ")]),e("tr",null,[e("td",null,"API attacks"),e("td",null," A malicious use of an API (application programming interface). ")]),e("tr",null,[e("td",null,"SSL stripping"),e("td",null," An attack that focuses on stripping the security from HTTPS-enabled websites. ")]),e("tr",null,[e("td",null,"Driver manipulation"),e("td",null," An attack that focuses on device drivers. The attack uses refactoring or shimming. ")])])],-1),e("p",null,"This section helps you prepare for the following certification exam objectives:",-1),e("table",{class:"objectives"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"},"Exam"),e("th",{scope:"col",class:"fw-bold"},"Objective")])]),e("tbody",null,[e("tr",null,[e("td",null,"TestOut Security Pro"),e("td",null,[t(" 3.2 Implement Application Defenses "),e("ul",null,[e("li",null,"Configure Web Application Security")])])]),e("tr",null,[e("td",null,"CompTIA Security+ SY0-601"),e("td",null,[t(" 1.3. Given a scenario, analyze potential indicators associated with application attacks. "),e("ul",null,[e("li",null,"Privilege escalation"),e("li",null,"Cross-site scripting"),e("li",null,[t(" Injections "),e("ul",null,[e("li",null,"Structured query language (SQL)"),e("li",null,"Dynamic link library (DLL)"),e("li",null,"Lightweight directory access protocol (LDAP)"),e("li",null,"Extensible markup language (XML)")])]),e("li",null,"Pointer/object dereference"),e("li",null,"Directory traversal"),e("li",null,"Buffer overflows"),e("li",null,[t(" Race conditions "),e("ul",null,[e("li",null,"Time of check/time of use")])]),e("li",null,"Error handling"),e("li",null,"Improper input handling"),e("li",null,[t(" Replay attack "),e("ul",null,[e("li",null,"Session replays")])]),e("li",null,"Integer overflow"),e("li",null,[t(" Request forgeries "),e("ul",null,[e("li",null,"Server-side"),e("li",null,"Client-side"),e("li",null,"Cross-site")])]),e("li",null,"Application programming interface (API) attacks"),e("li",null,"Resource exhaustion"),e("li",null,"Memory leak"),e("li",null,"Secure sockets layer (SSL) stripping"),e("li",null,[t(" Driver manipulation "),e("ul",null,[e("li",null,"Shimming"),e("li",null,"Refactoring")])]),e("li",null,"Pass the hash")]),t(" 1.4 Given a scenario, analyze potential indicators associated with network attacks. "),e("ul",null,[e("li",null,"Man in the browser")]),e("p",null," 2.3 Summarize secure application development, deployment, and automation concepts. "),e("ul",null,[e("li",null,[t(" Secure coding techniques "),e("ul",null,[e("li",null,"Server-side vs. client-side execution and validation")])])]),e("p",null,"3.1 Given a scenario, implement secure protocols."),e("ul",null,[e("li",null,[t(" Use cases "),e("ul",null,[e("li",null,"Email and web")])])]),e("p",null," 3.2. Given a scenario, implement host or application security solutions. "),e("ul",null,[e("li",null,[t(" Application security "),e("ul",null,[e("li",null,"Input validations"),e("li",null,"Hypertext Transfer Protocol (HTTP) headers")])])]),e("p",null," 4.1 Given a scenario, use the appropriate tool to assess organizational security. "),e("ul",null,[e("li",null,[t(" File manipulation "),e("ul",null,[e("li",null,"head")])])])])])])],-1),a('<h2 id="_10-3-1-web-application-attacks-1" tabindex="-1"><a class="header-anchor" href="#_10-3-1-web-application-attacks-1"><span>10.3.1 Web Application Attacks 1</span></a></h2><h3 id="web-application-attacks-00-00-00-32" tabindex="-1"><a class="header-anchor" href="#web-application-attacks-00-00-00-32"><span>Web Application Attacks 00:00-00:32</span></a></h3><p>People today connect, learn, shop, provide services, and do business over the internet. All of this is made possible through web browsers and web applications. There are thousands of applications written by thousands of programmers that we all use daily. With so many options, attackers have also found an exhaustive number of ways to exploit them. In this two-part lesson, we&#39;ll introduce you to many current web application attacks.</p><h3 id="privilege-escalation-00-32-01-09" tabindex="-1"><a class="header-anchor" href="#privilege-escalation-00-32-01-09"><span>Privilege Escalation 00:32-01:09</span></a></h3><p>First we&#39;ll look at privilege-escalation attacks, which constitute the majority of attacks today. There are two types: The first is horizontal escalation, which happens when an attacker gains data that belongs to another user with the same privilege level as themselves, like a co-worker. This attack is usually only focused on that individual. The second type, vertical escalation, is the one that most web application attacks fall under. This happens when an attacker uses system vulnerabilities to escalate their privileges to gain administrative access.</p><p>Let&#39;s look at some examples of attacks that are used for privilege escalation.</p><h3 id="pointer-object-dereference-01-09-02-57" tabindex="-1"><a class="header-anchor" href="#pointer-object-dereference-01-09-02-57"><span>Pointer/Object Dereference 01:09-02:57</span></a></h3><p>First is pointer or object dereferencing. A pointer stores a memory address which you can think of as your friend&#39;s pin location that he or she sends you. If you use a pointer to retrieve a stored memory value, it&#39;s called dereferencing the pointer. It&#39;s like following a map to get to your friend&#39;s location.</p><p>All operating systems embed a kernel in a user&#39;s workspace. The kernel is the operating system&#39;s core program that controls everything in that system. Page protections prevent the system user from accessing it, but this protection method can be exploited by a denial-of-service, or DoS, attack through a NULL pointer dereference. If the DMA driver module doesn&#39;t have enough security protections in place, it can possibly release user pages that are pinned to a pointer with a NULL value. This happens when an application dereferences an object that comes back NULL instead of valid.</p><p>This is like getting to your friend&#39;s location only to find that he or she&#39;s not there.</p><p>In the C programming language, which is commonly used for low-level system operations, NULL is built in to evaluate to 0. The vulnerability comes because x86 systems have a valid 0 address in the kernel-address space. So if an attacker can get to the kernel through a NULL pointer dereference response to the 0 address, he or she can potentially escalate to admin-level privileges and then have extensive control over the entire system.</p><p>This is like finding out that even though your friend isn&#39;t there, the map has brought you to a palace and the gate is open and the guards are asleep. When you enter, you find that you can declare yourself a royal and run the kingdom any way you want.</p><h3 id="buffer-overflow-attacks-02-57-03-52" tabindex="-1"><a class="header-anchor" href="#buffer-overflow-attacks-02-57-03-52"><span>Buffer Overflow Attacks 02:57-03:52</span></a></h3><p>Next let&#39;s look at buffer overflows. A buffer is a temporary data-storage area with limited space. Overflows occur when someone attempts to store more data than the program was written for. When an overflow occurs, it can allow hackers to cause data to flow to other memory areas. These overflow areas may not be protected and may leave files vulnerable. Attackers could then potentially access</p><p>database or system files, replacing executable code with malicious code. This is called arbitrary code execution and is often used for privilege escalation, which worst of all can result in remote system control.</p><p>Buffer overflows can also cause DoS attacks by crashing the program. Because we use buffers in many types of software, DoS attacks through buffer overflow can happen in routers, IoT devices, and firewalls.</p><h3 id="resource-exhaustion-attacks-03-52-05-10" tabindex="-1"><a class="header-anchor" href="#resource-exhaustion-attacks-03-52-05-10"><span>Resource Exhaustion Attacks 03:52-05:10</span></a></h3><p>Similar to buffer overflow attacks are resource exhaustion attacks.</p><p>Resource exhaustion is a form of attack that focuses on depleting a network&#39;s resources in order to create a denial of service to legitimate users. This can be done through slow header attacks, which send HTTP headers so slowly that it prevents other users from accessing the site. Use HTTP header timeouts to prevent this.</p><p>Attacks can also come in a similar form called slow post attacks, which send the HTTP POST body very slowly. This is done through forms, logins, or feedback input fields. To mitigate this issue, set a maximum body size for each form and set the web server setting with a maximum total transfer time. Server sockets can be slowed through read attacks when they receive large HTTP responses. Prevent this with the maximum total transfer time in the server settings.</p><p>Resource exhaustion can focus on memory, file-system storage, database connection-pool entries, or the CPU. When these components&#39; sizes aren&#39;t controlled, a denial of service can result from the lack of overall system resources.</p><h3 id="memory-leak-attacks-05-10-05-49" tabindex="-1"><a class="header-anchor" href="#memory-leak-attacks-05-10-05-49"><span>Memory Leak Attacks 05:10-05:49</span></a></h3><p>Memory leaks can be a problem as well. A memory leak happens when dynamic memory is allocated in a program without pointers connected to it. This causes it to never actually be returned. Programmers generally use these memory allocations temporarily, but they become a problem when they aren&#39;t deleted after use. If an attacker can intentionally create memory leaks, he or she can cause resource exhaustion and denial-of-service errors that shut down entire networks. On top of all this, the attacker can use this weak point to exploit other areas affected by low-memory conditions with buffer overflow attacks.</p><h3 id="race-conditions-05-49-06-51" tabindex="-1"><a class="header-anchor" href="#race-conditions-05-49-06-51"><span>Race Conditions 05:49-06:51</span></a></h3><p>Another web application vulnerability is a time-of-check to time-of-use bug, or TOCTTOU bug. This happens when someone programs a system to run with certain processes dependent on a sequence of events or race conditions. When an attacker schedules an operation between the time of check and time of use, the user&#39;s process may force a pause or send an error. For example, in the moment between authenticating to a system and utilizing that system, the attacker may be able to jump into the process and act as the authenticated user, leading to privilege escalation.</p><p>To mitigate this vulnerability, you must ensure that your operating system&#39;s file-system state isn&#39;t allowed to change between two system calls. Use file-system calls that run on file handles instead of file names when possible. These provide a private map to the file and can&#39;t be altered by another program. It&#39;s also a best practice to lock single files before a check.</p><h3 id="summary-06-51-07-18" tabindex="-1"><a class="header-anchor" href="#summary-06-51-07-18"><span>Summary 06:51-07:18</span></a></h3><p>That&#39;s it for part 1 of this lesson. In this lesson, we covered many common web application attacks. We looked at privilege escalation, pointer dereference, and buffer overflows. Then we discussed resource exhaustion and memory leak attacks. We finished by going over race conditions. We&#39;ll continue covering common web application attacks in part 2.</p><h2 id="_10-3-2-web-application-attacks-2" tabindex="-1"><a class="header-anchor" href="#_10-3-2-web-application-attacks-2"><span>10.3.2 Web Application Attacks 2</span></a></h2><h3 id="web-application-attacks-part-2-00-00-00-26" tabindex="-1"><a class="header-anchor" href="#web-application-attacks-part-2-00-00-00-26"><span>Web Application Attacks Part 2 00:00-00:26</span></a></h3><p>In this lesson, we&#39;ll continue our discussion on the variety of web application attack methods. With so many interactions happening each day through web apps, your organization needs a proactive security approach that includes hardening, purposeful programming, and strategic awareness. With that in mind, let&#39;s look at a few more application attacks and how to protect against them.</p><h3 id="error-handling-00-26-01-20" tabindex="-1"><a class="header-anchor" href="#error-handling-00-26-01-20"><span>Error Handling 00:26-01:20</span></a></h3><p>First, let&#39;s look at error-handling attacks. Improper error handling can create vulnerabilities in a system by revealing information that attackers can use to exploit the system. This over-display of information can result from bad coding practices.</p><p>For example, an attacker may use a SQL-injection attack that fails initially, but discloses the malformed query in the error message, revealing the query logic or other sensitive data like passwords. The attacker can use the new information from the error message to gain system access.</p><p>Another example would be an error message that discloses the full pathname in a path-transversal weakness-exploit attempt.</p><p>To protect against vulnerabilities in error handling, be sure to program error messages with minimal information that&#39;s useful only to the intended audience.</p><h3 id="improper-input-handling-01-20-02-36" tabindex="-1"><a class="header-anchor" href="#improper-input-handling-01-20-02-36"><span>Improper Input Handling 01:20-02:36</span></a></h3><p>The next attack comes from improper input handling, which is the most common vulnerability present in web applications today. Vulnerabilities occur when an application fails to validate data inputs such as forms, feedback, and log-on fields.</p><p>When a web application processes untrusted input data, it becomes vulnerable to many forms of attack, including buffer overflows, cross-site scripting, directory transversal, NULL byte injections, SQL injections, uncontrolled format strings, DoS attacks, and OS commanding.</p><p>For example, let&#39;s say that an e-commerce site implements a web application for handling the selecting, purchasing, and shipping of their products. The application provides forms for the customers to fill in with their billing and shipping information as well as a field for any specific instructions. Each of these fields provides an opening into their system that gives an attacker the opportunity to input malicious code.</p><p>It becomes very important to set specific parameters for acceptable data types and to accurately define data restrictions. It&#39;s also important to validate, sanitize, and filter these input fields.</p><h3 id="replay-attacks-02-36-03-39" tabindex="-1"><a class="header-anchor" href="#replay-attacks-02-36-03-39"><span>Replay Attacks 02:36-03:39</span></a></h3><p>Next we have replay attacks, sometimes called session replay attacks. These occur when network traffic is intercepted by an unauthorized person who then replays the communication to its original receiver but acts as the original sender. The original sender is unaware of this occurrence, making this a man-in-the-middle, or MITM, attack.</p><p>For example, let&#39;s say that Suzie logs into her favorite retail clothing website to order her new summer wardrobe. She places her order and closes the tab on her computer.</p><p>Suzie finds out the next day that her credit card was used to make multiple purchases in the past 24 hours on things she&#39;s never heard of. Suzie was a victim of a replay attack. What Suzie didn&#39;t know was that a hacker had intercepted her secure network communication and replayed that information in order to act as her and use her credit card to make purchases. This type of attack is used in many more ways than just credit card information.</p><h3 id="replay-attack-prevention-03-39-03-57" tabindex="-1"><a class="header-anchor" href="#replay-attack-prevention-03-39-03-57"><span>Replay Attack Prevention 03:39-03:57</span></a></h3><p>To prevent this form of attack, use a strong digital signature with timestamps, session keys that are time bound and process bound, and sequence numbers. Authentication systems can be programmed to accept network packets that have valid timestamps and sequence numbers.</p><p>Application Programming Interface (API) Attacks 03:57-05:02 Next, let&#39;s talk about API attacks. Almost all businesses have an application programming interface, or API. This is the way businesses transfer information between systems within their organization and how a business communicates information to another business. This is also a means of information transfer between companies and their customers, as APIs are the way most applications communicate with websites. It&#39;s safe to say that APIs are used to conduct billions of dollars worth of transactions. Their vulnerability lies in that many are openly published in order to promote customer usage and make interactions easy. But, a business may also use an API for internal purposes. For example, an e-commerce site may use its API for product catalog pages, for features on their mobile app, for a third-party reseller, or for search engine bots. This openness creates an opportunity for a malicious user to exploit the interface to gain access to internal data and infrastructure.</p><h3 id="api-protection-05-02-05-32" tabindex="-1"><a class="header-anchor" href="#api-protection-05-02-05-32"><span>API Protection 05:02-05:32</span></a></h3><p>Rate limiting, which limits the number of calls a client can make within a period of time, can help prevent these attacks. Administrators can also detect and analyze unauthorized attempts through security logs and access logs. You can look at SQL injections, which occur when a SQL statement is entered into a data field and executed in the database. Finally, you can program notifications to be sent when there is an excess of error messages.</p><h3 id="secure-sockets-layer-ssl-stripping-05-32-07-12" tabindex="-1"><a class="header-anchor" href="#secure-sockets-layer-ssl-stripping-05-32-07-12"><span>Secure Sockets Layer (SSL) Stripping 05:32-07:12</span></a></h3><p>Next we have SSL stripping, which is an attack that focuses on stripping the security from HTTPS-enabled websites. It does this through intercepting the initial request a user sends to a website. The attacker then establishes a secure connection with the intended server and an unsecure HTTP connection with the user in which all communication goes through him or her. The attacker can intercept the initial request when it comes through a 302 redirect or through a non-SSL site that provides a link to a proxy made to look like the intended site.</p><p>For example, let&#39;s say Bob is researching for his upcoming vacation and there&#39;s a link for a travel agency on one of the sites. Bob has heard of the agency before, and so he clicks on the link. But this link connects him to the attacker&#39;s unsecure proxy server which then connects to the actual travel agency&#39;s website. Bob is unaware that he wasn&#39;t on a secure site to begin with and that he&#39;s currently not directly connected to the agency&#39;s site. Nor does he realize that all the information he shares with the travel agency is being collected by an attacker. If he&#39;d looked at his address bar, he would have seen an HTTP address, not an HTTPS address. This could have given Bob a clue.</p><p>Ways to protect your network against SSL stripping include encrypting all elements of your site with an SSL certificate and adding your domain to the HSTS preload list, which lets browsers know that your site is secure.</p><h3 id="driver-manipulation-07-12-08-09" tabindex="-1"><a class="header-anchor" href="#driver-manipulation-07-12-08-09"><span>Driver Manipulation 07:12-08:09</span></a></h3><p>Next we have driver manipulation, which can happen through shimming or refactoring. When a driver becomes outdated or incompatible with software, additional code can be written called a driver shim that helps the driver work with the new software. The second option is code refactoring, which is rewriting the internal process of the code without changing the external actions.</p><p>Savvy attackers can manipulate the drivers through shimming or refactoring to trick the operating system into running malicious code.</p><p>For example, software drivers are usually used to decrypt data in an operating system. If a hacker can manipulate the driver on your decryption software, he or she can gain access to all your network&#39;s sensitive data.</p><p>To protect against this attack, use multiple protections like perpetual backups, antivirus software, and the blocking of known malicious URLs.</p><h3 id="pass-the-hash-attacks-08-09-09-31" tabindex="-1"><a class="header-anchor" href="#pass-the-hash-attacks-08-09-09-31"><span>Pass the Hash Attacks 08:09-09:31</span></a></h3><p>Finally, let&#39;s look at an attack called pass the hash. This is how it works:</p><p>First, an attacker gains access to an individual computer through malware or other techniques. Once the attacker is in that user&#39;s workstation, he or she can access the memory of any network user&#39;s stored hashes. The attacker can then gain access to other workstations in the network and search each one for stored hashes until he or she finds a hash that gives access to higher-level administrative privileges. Once that happens, the attacker may have access to the whole network, acting as if he or she is an administrator.</p><p>To mitigate this attack, prevent standard users and local admins from having access to other users&#39; workstations through direct networking. You can use the Group Policy Object, or GPO, editor to disable remote desktop connections in an Active Directory network. You can also practice the principle of least privilege by limiting domain admins&#39; reach to only workstations with the same privilege level as they themselves have and by creating separate standard-user-level accounts for admins to use when</p><p>accessing lower-privilege machines. This limits an attacker&#39;s ability to escalate privileges if he or she gains access to a standard user&#39;s computer.</p><h3 id="summary-09-31-10-02" tabindex="-1"><a class="header-anchor" href="#summary-09-31-10-02"><span>Summary 09:31-10:02</span></a></h3><p>That&#39;s it for this lesson. In part 2 of this lesson, we covered seven more common web application attacks, including attacks through error handling, improper input handling, replay sessions, APIs, SSL stripping, driver manipulation, and passing the hash. With so many interactions occurring daily through web apps, awareness of attacks and mitigation techniques are essential for your cybersecurity.</p><h2 id="_10-3-3-xss-and-csrf-attacks" tabindex="-1"><a class="header-anchor" href="#_10-3-3-xss-and-csrf-attacks"><span>10.3.3 XSS and CSRF Attacks</span></a></h2><h3 id="xss-and-csrf-attacks-00-00-00-27" tabindex="-1"><a class="header-anchor" href="#xss-and-csrf-attacks-00-00-00-27"><span>XSS and CSRF Attacks 00:00-00:27</span></a></h3><p>In this lesson we&#39;re going to talk about Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF).</p><p>Both of these exploits are web application exploits and take advantage of a web browser&#39;s ability to execute code on the client. This allows an attacker to gain access to information on the user&#39;s computer or to trick the user into providing information that the attacker can get access to.</p><h3 id="cross-site-scripting-xss-attacks-00-27-02-22" tabindex="-1"><a class="header-anchor" href="#cross-site-scripting-xss-attacks-00-27-02-22"><span>Cross-Site Scripting (XSS) Attacks 00:27-02:22</span></a></h3><p>Cross-site Scripting Attacks are a type of injection attack where malicious code is saved onto an otherwise benign site.</p><p>For example, a site that allows a user to provide input and display that back to users, such as a forum, could be used by malicious individuals to save and execute a client-side script if the input isn&#39;t properly sanitized. These scripts can then be used to gather information from a user&#39;s computer.</p><p>Sometimes, cross-site scripting attacks take advantage of how web developers store information on a user&#39;s computer using cookies. Cookies are commonly used to store information when a user is logged in. Typically, this is a unique session key that&#39;s temporarily stored and associated with a particular user. The browser sends this information to the user as part of the header for each request that it makes to the server, and the unique session key identifies that the user is currently logged in, thus avoiding the need to send user names and passwords for each request.</p><p>This approach isn&#39;t necessarily bad. However, if other vulnerabilities exist, an attacker can covertly steal this information by executing a client-side script requesting cookies for that domain. It then displays those cookies as part of the HTML page that is returned. To identify a vulnerable website, attackers will see if they can pass small snippets of text through an input field.</p><p>For example, many websites will have a form that takes some input. If the developer doesn&#39;t sanitize the inputs, these input fields can be used to execute code. Many attackers will use a simple JavaScript alert to see if vulnerabilities exist.</p><p>If not properly sanitized, a script like this pops up an alert saying, —œvulnerable.— Once a site is found to be vulnerable, a more complicated script is run that has the browser send cookies for the current site. With this information, the attacker can then gain access to the system and get more sensitive and valuable information like credit cards or personal identifying information.</p><h3 id="cross-site-request-forgery-csrf-attacks-02-22-03-20" tabindex="-1"><a class="header-anchor" href="#cross-site-request-forgery-csrf-attacks-02-22-03-20"><span>Cross-Site Request Forgery (CSRF) Attacks 02:22-03:20</span></a></h3><p>Another attack to know is the Cross-Site Request Forgery Attack, which is usually abbreviated as CSRF [/see-SURF/]. A CSRF attack is a malicious exploit where unwanted commands are executed on a website where the user has already been authenticated. For instance, if a user has already logged onto a site, an attacker could update his or her password by simply sending the appropriate parameters to the password reset page.</p><p>Cross-site request forgery is often called a One-Click Attack because all that a user needs to do is click a link on a webpage or in an email that contains the malicious code. If the website doesn&#39;t have anti-forgery protections, the code can automatically update information without further intervention.</p><p>Now, unlike cross-site scripting, which exploits the trust the user has for a particular website, CSRF exploits trust in the other direction. It exploits the trust that the website has for the end-user&#39;s browser. Let&#39;s look at how it works.</p><h3 id="how-a-csrf-attack-works-03-20-04-48" tabindex="-1"><a class="header-anchor" href="#how-a-csrf-attack-works-03-20-04-48"><span>How a CSRF Attack Works 03:20-04:48</span></a></h3><p>The CSRF attack works by including a link, or even a script, in either a web page, an email message, or an instant message that accesses a site to which the user has already been authenticated. This is why we say it exploits the website&#39;s trust in the end-user&#39;s browser. Now, several things must happen for this to work.</p><p>First, the website must rely on a user&#39;s identity. A good example is your bank&#39;s website that you log into to manage your bank account. That website has to trust the end-user&#39;s identity via some mechanism in the web browser. A classic example is a cookie.</p><p>After that, this attack uses this information to trick the web browser into sending an HTTP request to this targeted site without the end-user&#39;s knowledge. If the targeted website has developed their application correctly by requiring an authenticated end-user to confirm specific actions, then this type of attack won&#39;t work. However, many websites perform actions based on user input without requiring the end-user to confirm those actions. And this is where we get into trouble.</p><p>For example, many websites have a —œRemember Me— checkbox that doesn&#39;t require users to re-enter their username and password on subsequent visits to that site—&quot;you&#39;re automatically logged in. When you select that checkbox, you are essentially telling the website to create and save a session cookie on your computer. A CSRF attack could then leverage this cookie to send an HTTP request to the site to perform some type of unwanted action, such as changing the user&#39;s password.</p><h3 id="csrf-in-action-04-48-05-50" tabindex="-1"><a class="header-anchor" href="#csrf-in-action-04-48-05-50"><span>CSRF in Action 04:48-05:50</span></a></h3><p>Let&#39;s walk through an example of a CSRF attack to help you better understand how it works.</p><p>Suppose you get an email message with the subject line, —œCheck out this funny picture!— You&#39;re in the mood for a laugh, so you open the email. When you do, you don&#39;t see any image—&quot;the image link appears to be broken. A couple of days later, you realize that your bank account has been drained. You&#39;ve been the victim of a CSRF attack.</p><p>What happened is the &quot;funny picture&quot; email contained underlying HTML code that executed when you opened the email. Here&#39;s what a normal HTML image tag looks like. Notice the file extension at the end. However, here&#39;s what a CSRF exploit would look like.</p><p>Notice the link here. Instead of downloading the image, this code automatically executes, which uses the saved cookie on your computer to authenticate to your bank&#39;s website allowing the attacker to transfer your money.</p><p>You may have noticed that almost all email clients nowadays automatically disable images. You now must click an option to view images in these email message. The reason for this is to prevent CSRF attacks.</p><h3 id="csrf-win-conditions-05-50-06-54" tabindex="-1"><a class="header-anchor" href="#csrf-win-conditions-05-50-06-54"><span>CSRF Win Conditions 05:50-06:54</span></a></h3><p>CSRF attacks can be tricky to pull off. There are several factors that need to be in place for these attacks to work.</p><p>First, the target website must not check the referring header of the HTTP request. And while this is more common than you would think, a properly secured website will check for this.</p><p>Second, the attacker must understand the form submission syntax at the target site so they can construct the appropriate URL. This step is relatively easy.</p><p>Third, the attacker must know some key pieces of personal information required by the form. In this example, they must know the account number of the victim and how to plug that into the URL.</p><p>And finally, the user authentication to that website must meet two criteria: it needs to be possible, and it must be transparent to the user. In other words, the website can&#39;t ask the user to confirm that they want to authenticate to the site and that they want to complete the transaction. This can be accomplished in two ways. One way is by using a saved session cookie, such as in this example. The second way is simply hoping that the user is currently logged into that website.</p><h3 id="a-blind-attack-06-54-07-42" tabindex="-1"><a class="header-anchor" href="#a-blind-attack-06-54-07-42"><span>A Blind Attack 06:54-07:42</span></a></h3><p>It&#39;s important to note that a CSRF attack is what we call a Blind Attack, meaning that the attacker can&#39;t see what happens; they can&#39;t see the response that the target website sends back to the victim&#39;s web browser after the forged request is sent.</p><p>Also, attackers will have a difficult time if the website responds with some type of confirmation, a second form, or other information that must be submitted after the initial URL is executed. There are ways around this, however.</p><p>For example, the attacker could include multiple images in the email message which will complete each subsequent step in the transfer process: the first image would initiate the transfer from one account to another, the second image might specify when to execute the transfer, and the third image might confirm the transfer.</p><p>Now as you can see this is a fairly complex attack, but it&#39;s not impossible.</p><h3 id="preventing-a-csrf-attack-07-42-09-24" tabindex="-1"><a class="header-anchor" href="#preventing-a-csrf-attack-07-42-09-24"><span>Preventing a CSRF Attack 07:42-09:24</span></a></h3><p>It&#39;s essential to follow these two steps to protect organizations and end users from CSRF attacks.</p><p>The first step is to implement secure web development and authentication practices. For example, a lot of web application frameworks support anti-forgery mechanisms, such as the ability to create paired tokens that are mathematically related. One token is saved in a cookie on the client. A second token is saved in the form that is used to submit information. In order for the form to be submitted, these two tokens must match, or an error will occur.</p><p>Another mechanism to implement is an idle timeout that automatically ends a user&#39;s session if they have been idle for too long. A lot of banking websites actually have this functionality.</p><p>The second step is to train end users to protect themselves from CSRF attacks. Teach them that if they log into a website that requires authentication of some sort—&quot;a banking site or eCommerce site—&quot;they should immediately log out when they are done using that site. They should also close the browser tab or browser window. It&#39;s problematic when users stay logged into services after they are done using them. This opens them up to CSRF attacks because they are authenticated to that service.</p><p>Another concern is Remember Me check boxes. While this feature is often convenient, it does increase the likelihood that a CSRF attack will succeed. As such, train users never to use this feature.</p><p>And finally, train users to never load images or accept instant messages from unknown sources. Even though many email clients and IM applications will automatically hide or block images from unknown sources, it&#39;s still possible for the end user to choose to download those images. Therefore, make sure to train users never to download or load images from unknown or suspicious sources.</p><h3 id="summary-09-24-09-42" tabindex="-1"><a class="header-anchor" href="#summary-09-24-09-42"><span>Summary 09:24-09:42</span></a></h3><p>That&#39;s it for this demonstration. In this lesson, we talked about cross-site scripting (XSS) and cross-site request forgery (CSRF). We looked at how they work, some example attacks, and what you can do to protect your organization from these threats.</p><h2 id="_10-3-4-injection-attacks" tabindex="-1"><a class="header-anchor" href="#_10-3-4-injection-attacks"><span>10.3.4 Injection Attacks</span></a></h2><h3 id="injection-attacks-00-00-00-14" tabindex="-1"><a class="header-anchor" href="#injection-attacks-00-00-00-14"><span>Injection Attacks 00:00-00:14</span></a></h3><p>In this lesson, we&#39;re going to talk about injection attacks. We&#39;re going to focus on LDAP, XML, and command injection attacks and a variation called the directory traversal attack.</p><h3 id="ldap-injection-attacks-00-14-01-21" tabindex="-1"><a class="header-anchor" href="#ldap-injection-attacks-00-14-01-21"><span>LDAP Injection Attacks 00:14-01:21</span></a></h3><p>A lightweight directory access protocol, or LDAP, injection attack is used to exploit a web-based application. If the application fails to properly validate the input in the form fields, then it&#39;s possible for the wrong commands to be constructed. This could potentially provide an attacker with unauthorized access to the LDAP directory tree. They may be able to view more information than they should have access to, or even modify it.</p><p>Suppose we have an application that uses LDAP calls to communicate with the directory tree. Client workstations can access the web server, load the application&#39;s web page, and query the directory services tree.</p><p>Here, if the user supplies an invalid value, or a malicious value, unexpected behavior can occur. For example, suppose the user puts an asterisk (*) in this field and submits the form. Depending on the configuration, the directory server could respond to the LDAP query with a list of every user in the directory services tree. You do not want an attacker to be able to see all the users in your tree.</p><p>An attacker could even use this field to view the attributes of a user object, such as the password.</p><h3 id="xml-injection-attacks-01-21-01-59" tabindex="-1"><a class="header-anchor" href="#xml-injection-attacks-01-21-01-59"><span>XML Injection Attacks 01:21-01:59</span></a></h3><p>An XML injection attack manipulates the XML structure used by an XML-based application or service. It inserts malicious content into the structure, which can affect the application&#39;s output. An XML injection attack might cause your CDATA field to be ignored by your XML parser and input validation filters. It will slip by. In this example, the payload contains a malicious URL. If the user clicks on the link thinking it&#39;s for something else, it will actually go to that user&#39;s banking account and run a cross-site request forgery attack. This is just a simple example, and the result of the attack would depend on what the malicious URL contains.</p><h3 id="command-injection-attacks-01-59-02-45" tabindex="-1"><a class="header-anchor" href="#command-injection-attacks-01-59-02-45"><span>Command Injection Attacks 01:59-02:45</span></a></h3><p>Let&#39;s review command-injection attacks. The purpose of this attack is to inject and execute commands in a vulnerable application. The vulnerable application runs commands on behalf of the attacker with the privileges assigned to the application itself.</p><p>Let&#39;s suppose a Linux server is running the DNS service. If an attacker was able to exploit this service, they could then run commands on this Linux server. This was a very popular attack several years ago. Many system administrators ran this service as the root user account, which allowed them to run commands with full access. To combat this attack, you should never run a service as an administrative user. Instead, create a limited user account on the system that only has access to what the service requires and nothing more.</p><h3 id="directory-traversal-02-45-03-48" tabindex="-1"><a class="header-anchor" href="#directory-traversal-02-45-03-48"><span>Directory Traversal 02:45-03:48</span></a></h3><p>Let&#39;s look at one more variation of the injection attack called the directory traversal attack or path traversal attack. This attack&#39;s goal is to gain access to a specific file stored elsewhere in the file system. It usually exploits some type of vulnerability in the application itself, such as not properly validating user input. In this case, characters representing the path to the parent directory on the application server could be manipulated to allow access to secure files.</p><p>For example, let&#39;s say there is a file directory with two subdirectories. Inside subdirectory A, there is a file named 123. Inside subdirectory B, there is a file named 456. The user, in this case, only has access to file 456, and he can search the directory hierarchy for a vulnerability and access file 123.</p><p>Because of this vulnerability, web applications need to be coded such that they look for all characters that could be used for directory traversal, whether it&#39;s the actual characters (&quot;..&quot;, &quot;/&quot;, &quot;&quot;) or their percent encoded equivalents.</p><h3 id="summary-03-48-04-01" tabindex="-1"><a class="header-anchor" href="#summary-03-48-04-01"><span>Summary 03:48-04:01</span></a></h3><p>In this lesson, we looked at injection attacks. We have covered LDAP, XML, and command injection attacks. We ended by looking at directory traversal attacks.</p><h2 id="_10-3-5-header-manipulation" tabindex="-1"><a class="header-anchor" href="#_10-3-5-header-manipulation"><span>10.3.5 Header Manipulation</span></a></h2><h3 id="header-manipulation-00-00-00-19" tabindex="-1"><a class="header-anchor" href="#header-manipulation-00-00-00-19"><span>Header Manipulation 00:00-00:19</span></a></h3><p>In this lesson, we&#39;ll discuss HyperText Transfer Protocol header manipulation attacks, or HTTP header manipulation attacks. To understand how these attacks work, let&#39;s first review how HTTP protocol works.</p><h3 id="http-protocol-00-19-01-03" tabindex="-1"><a class="header-anchor" href="#http-protocol-00-19-01-03"><span>HTTP Protocol 00:19-01:03</span></a></h3><p>A client system runs a web browser, and a server system runs a web server. The client sends HTTP requests to the web server. The server responds with an HTTP header and an HTML response body, which is the website&#39;s content. Separation of the header and body is created with special characters in a specific combination, which are called a carriage return and line feed, or CRLF.</p><p>Header manipulation is the process of including unvalidated data within an HTTP response header. One of the most common header manipulation attacks is HTTP response splitting. Let&#39;s look at how it works.</p><h3 id="http-response-splitting-01-03-01-46" tabindex="-1"><a class="header-anchor" href="#http-response-splitting-01-03-01-46"><span>HTTP Response Splitting 01:03-01:46</span></a></h3><p>Here, the web application in question must allow input that contains carriage return characters, \\r, and line feed characters, \\n, in the HTTP response&#39;s header itself. These characters give the attacker control of the remaining headers in the body of the response that&#39;s sent back to the browser. In this case, the response is split in two, and the response down here is completely controlled by the attacker, who can construct it using any header and body he or she wants. The browser interprets this HTTP response as two separate responses instead of one. This type of vulnerability can be exploited for several web application attacks.</p><h3 id="cache-poisoning-attack-01-46-02-11" tabindex="-1"><a class="header-anchor" href="#cache-poisoning-attack-01-46-02-11"><span>Cache Poisoning Attack 01:46-02:11</span></a></h3><p>Let&#39;s look at cache poisoning first. To make HTTP faster and more efficient, the server retains, or caches, a processing request the first time it&#39;s received. The server then uses that cached information for each subsequent request. Cache poisoning occurs when an HTTP request is sent that causes a malicious response to be saved in the web cache server and sent to other users.</p><h3 id="cache-poisoning-attack-02-11-02-37" tabindex="-1"><a class="header-anchor" href="#cache-poisoning-attack-02-11-02-37"><span>Cache Poisoning Attack 02:11-02:37</span></a></h3><p>To carry out a cache poisoning attack, the attacker first finds a vulnerability in the web application that allows him or her to fill the HTTP header response field with multiple headers. This forces the cache server to flush its real cache content and replace it with the new poisoned cache content from the attack. The malicious code is then sent to each of the clients when they send their request for the original website.</p><h3 id="cache-poisoning-prevention-02-37-02-57" tabindex="-1"><a class="header-anchor" href="#cache-poisoning-prevention-02-37-02-57"><span>Cache Poisoning Prevention 02:37-02:57</span></a></h3><p>To prevent this attack, make sure to set the HTTP response header on your server correctly. Tell any HTTP cache to include the Vary HTTP response header. You should also validate and cleanse any inputs and block input from HTTP request headers and cookies whenever possible.</p><h3 id="cross-user-defacement-02-57-03-41" tabindex="-1"><a class="header-anchor" href="#cross-user-defacement-02-57-03-41"><span>Cross-User Defacement 02:57-03:41</span></a></h3><p>Next, we have cross-user defacement. This attack is also carried out through response splitting. Let&#39;s look at how it works.</p><p>If a web application allows you to fill the header field with more than one header using CRLF, an attacker can insert malicious input and cause split responses. The user could be redirected to a site that mimics the original one and tricked into sharing sensitive information. Alternatively, the user could be shown a defaced version of the original site. The original site is untampered with, but the user is shown a temporarily defaced site, causing him or her to assume the site has been hacked and is untrustworthy.</p><h3 id="cookie-manipulation-attacks-03-41-04-44" tabindex="-1"><a class="header-anchor" href="#cookie-manipulation-attacks-03-41-04-44"><span>Cookie Manipulation Attacks 03:41-04:44</span></a></h3><p>Finally, let&#39;s look at how header manipulation attacks can manipulate cookies. Cookies are a temporary file that a browser uses to track returning-user interactions. The cookie data is included in the HTTP&#39;s subsequent request headers. Many websites use cookies to establish a session with a browser. Once the user authenticates, a token is returned in the cookie and used for authentication from there on out. This makes cookies valuable for attackers to manipulate or steal. In header manipulation, an attacker can inject a set-cookie response header into the HTTP header. This assigns a new cookie for the unsuspecting user, which can lead to cross-site scripting or session fixation.</p><p>To guard against this form of attack, sanitize location response header values, define content-security-policy in the HTML, and make sure to set your cookies to secure and HTTPOnly. These steps limit cookie transmission to HTTP.</p><h3 id="summary-04-44-05-06" tabindex="-1"><a class="header-anchor" href="#summary-04-44-05-06"><span>Summary 04:44-05:06</span></a></h3><p>That&#39;s it for this lesson. In this lesson, we discussed header manipulation and response splitting header attacks. We reviewed cache poisoning, cross-user defacement, and cookie manipulation. We also covered mitigation techniques for each of these scenarios.</p><h2 id="_10-3-6-zero-day-application-attacks" tabindex="-1"><a class="header-anchor" href="#_10-3-6-zero-day-application-attacks"><span>10.3.6 Zero Day Application Attacks</span></a></h2><h3 id="zero-day-application-attacks-00-00-00-17" tabindex="-1"><a class="header-anchor" href="#zero-day-application-attacks-00-00-00-17"><span>Zero Day Application Attacks 00:00-00:17</span></a></h3><p>Let&#39;s talk about the Zero-Day Attack.</p><p>A zero-day attack is a threat that exploits a vulnerability in a computer application that is still unknown, or that has never been exploited before. There are two primary vehicles used to conduct these types of attacks.</p><h3 id="attacks-00-17-00-30" tabindex="-1"><a class="header-anchor" href="#attacks-00-17-00-30"><span>Attacks 00:17-00:30</span></a></h3><p>The first one is a web browser. Browsers are popular targets because almost every system has one.</p><p>The other type is sending zero-day exploits via email. A zero-day email contains a link that launches the attack if it&#39;s clicked.</p><h3 id="unknown-vulnerability-management-process-00-30-01-03" tabindex="-1"><a class="header-anchor" href="#unknown-vulnerability-management-process-00-30-01-03"><span>Unknown Vulnerability Management Process 00:30-01:03</span></a></h3><p>A zero-day attack occurs during the window between the time when the attacker first exploits the vulnerability and when the software developer creates a fix for it. This window may vary from a couple of days to many years.</p><p>With this in mind, let&#39;s look at a process that many software developers use to prevent zero-day attacks. It is the -Unknown Vulnerability Management Process—.</p><p>The unknown vulnerability management process is a quality assurance process that finds and fixes unknown zero-day vulnerabilities. It is composed of four phases: analyze, test, report, and mitigate.</p><h3 id="phases-01-03-01-46" tabindex="-1"><a class="header-anchor" href="#phases-01-03-01-46"><span>Phases 01:03-01:46</span></a></h3><p>During the —Analyze— phase, the developers are trying to find the application&#39;s vulnerabilities. They&#39;re looking for weaknesses and attack vectors, which are ways an attacker can get into the application. Here, the developers try to break the application themselves.</p><p>Next is the —Test— phase. During this phase, what&#39;s called —fuzz testing— is conducted against the attack vectors identified during the analysis phase.</p><p>After testing comes the —Report— phase. During the report phase, personnel try to reproduce any issues found during the testing phase to make sure that the situation is replicable and represents a real vulnerability.</p><p>Next is the —Mitigate— phase. This is where a fix is developed for the vulnerability, based on the results of the testing and reporting phases.</p><h3 id="defending-against-zero-day-attacks-01-46-02-24" tabindex="-1"><a class="header-anchor" href="#defending-against-zero-day-attacks-01-46-02-24"><span>Defending Against Zero-day Attacks 01:46-02:24</span></a></h3><p>What should Security Administrators do to defend against zero-day attacks? First is to configure automatic updates for the operating system and the application.</p><p>By configuring automatic updates to the operating system, you are patching holes in the operating system where the application is running. The zero-day attacker is going to be looking for an exploit unique to that application. However, you want to close as many attack vectors as you can. Keeping your operating system updated will make your system safer from attacks in general.</p><p>You should also have a network firewall and a host firewall. By using a host-based firewall, you&#39;re hardening the system where the application is running, making it more difficult for an exploit to take place.</p><h3 id="use-an-ids-ips-02-24-02-59" tabindex="-1"><a class="header-anchor" href="#use-an-ids-ips-02-24-02-59"><span>Use an IDS/IPS 02:24-02:59</span></a></h3><p>Finally, you should use an IDS or an IPS. For zero-day attacks, you are looking for anomalies. Consequently, virus scanners or malware detection applications probably won&#39;t work because they&#39;re based on signatures. There won&#39;t be a signature for an unknown exploit, and the attack will slip by your malware detection software.</p><p>By using an intrusion detection system or an intrusion prevention system, you look for anomalies against the norm. The IDS system will alert you that there is something unusual going on with the system. You can then begin troubleshooting, and you may discover a potential zero-day attack occurring.</p><h3 id="summary-02-59-03-19" tabindex="-1"><a class="header-anchor" href="#summary-02-59-03-19"><span>Summary 02:59-03:19</span></a></h3><p>In this video, we covered the basics of zero-day attacks and what they are. Then we looked at the methodology and procedures that software developers use to find the unknown vulnerabilities. Finally, we looked at a few things that you can do on your end to defend against zero-day attacks.</p><h2 id="_10-3-7-client-side-attacks" tabindex="-1"><a class="header-anchor" href="#_10-3-7-client-side-attacks"><span>10.3.7 Client-Side Attacks</span></a></h2><h3 id="client-side-attacks-00-00-00-07" tabindex="-1"><a class="header-anchor" href="#client-side-attacks-00-00-00-07"><span>Client-Side Attacks 00:00-00:07</span></a></h3><p>In this lesson, we&#39;ll look at client-side attacks.</p><p>Many attacks are focused on servers because servers have assets on them.</p><p>Server-Side Attack vs. Client-Side Attacks 00:07-00:42 For example, a server may have a company&#39;s corporate database and financial information. Client systems are individual users&#39; workstations and haven&#39;t always been seen as valuable compared to assets on a server. But clients are still attacked because they generally have fewer protections. Exploiting a client system can be an easy way for attackers to gain personal information about an end user, but it may also provide an avenue for privilege escalation to a larger network.</p><p>Let&#39;s compare how server-side attacks and client-side attacks work.</p><h3 id="server-side-attacks-00-42-01-23" tabindex="-1"><a class="header-anchor" href="#server-side-attacks-00-42-01-23"><span>Server-Side Attacks 00:42-01:23</span></a></h3><p>In a server-side attack, you have a server--for example, an eCommerce server--and its job is to provide an online shopping system. Clients access it over the internet to purchase items. To provide a service to help its customers, the company enables the service on the server, which opens an IP port. This port provides an opening into the server that a hacker can exploit.</p><p>In this example, an attacker could send a maliciously crafted HTTP request to the web server, causing various problems – maybe a buffer overflow that allows the hacker to control and exploit the web server.</p><p>In a server-side attack, the server is the target of the attack, and the attack comes from a client.</p><h3 id="client-side-attack-01-23-01-59" tabindex="-1"><a class="header-anchor" href="#client-side-attack-01-23-01-59"><span>Client-Side Attack 01:23-01:59</span></a></h3><p>In a client-side attack, the client station is attacked with a malicious server process or with malicious code that comes from a server.</p><p>Here, the server becomes the bad guy that initiates an attack on the client system. The server itself may have been exploited.</p><p>A client-side attack can take many forms. It could be from a web server through HTTP, or it can be instigated by email, FTP, or even streaming media. The key thing to remember is that the client initiates a connection with the compromised or bogus server. Once that connection&#39;s been established, the server uses it to exploit the client system.</p><h3 id="driver-manipulation-01-59-02-37" tabindex="-1"><a class="header-anchor" href="#driver-manipulation-01-59-02-37"><span>Driver Manipulation 01:59-02:37</span></a></h3><p>For example, one attack that can be used to compromise a client workstation is driver manipulation. Drivers help the software communicate with the client system&#39;s hardware and are usually trusted. Drivers can be manipulated in two ways. The first way is through shimming. When a driver becomes outdated or incompatible with software, additional code can be written that can help the driver work with the software. If a user has an outdated driver, he can unknowingly request an update from a compromised server. The driver can then be shimmed with malicious code that can bypass security as a driver and do things like record all the user&#39;s keystrokes.</p><h3 id="driver-manipulation-02-37-02-56" tabindex="-1"><a class="header-anchor" href="#driver-manipulation-02-37-02-56"><span>Driver Manipulation 02:37-02:56</span></a></h3><p>The second type of driver manipulation is code refactoring, which is rewriting the internal process of the code without changing the external actions. This can be dangerous because code can be written to change how it looks each time it&#39;s downloaded so that it won&#39;t be detected by antivirus software and the driver will seem to function normally.</p><h3 id="client-side-attack-mitigation-02-56-03-10" tabindex="-1"><a class="header-anchor" href="#client-side-attack-mitigation-02-56-03-10"><span>Client-Side Attack Mitigation 02:56-03:10</span></a></h3><p>To protect yourself from client-side attacks, it&#39;s good to implement a layered approach with a host-based firewall, a network firewall, and an intrusion detection system or IDS. You should also block known malicious URLs and make backups often.</p><h3 id="summary-03-10-03-27" tabindex="-1"><a class="header-anchor" href="#summary-03-10-03-27"><span>Summary 03:10-03:27</span></a></h3><p>That&#39;s it for this lesson. In this lesson, we discussed client-side attacks and server-side attacks. We went over forms of client-side attacks and driver manipulation. We finished by discussing ways to deflect these attacks.</p><h2 id="_10-3-8-web-browser-threats" tabindex="-1"><a class="header-anchor" href="#_10-3-8-web-browser-threats"><span>10.3.8 Web Browser Threats</span></a></h2><h3 id="web-browser-threats-00-00-00-18" tabindex="-1"><a class="header-anchor" href="#web-browser-threats-00-00-00-18"><span>Web Browser Threats 00:00-00:18</span></a></h3><p>Web browsers present a unique threat to every organization. They are used in almost every aspect of work these days. They really are a necessary evil.</p><p>Because of this, it&#39;s important that you understand the threats that web browsers are vulnerable to and how you can protect against them.</p><h3 id="security-settings-00-18-01-04" tabindex="-1"><a class="header-anchor" href="#security-settings-00-18-01-04"><span>Security Settings 00:18-01:04</span></a></h3><p>The first thing you should do with any application, web browser or not, is make sure the security settings are configured properly.</p><p>Many web applications enable different functionalities on your browser that leave you vulnerable to attacks, so the safest policy is to disable most functions that are not absolutely necessary for the application. Then, if you determine a website is trustworthy, you can temporarily enable the functionalities as needed.</p><p>Because each web browser has different security settings and user interfaces, it would be impossible to go into detail for each one. In addition, complex security settings will be covered in a later lesson. For now, just know that using the proper security settings is one of the steps in effectively protecting against web browser threats.</p><p>So, let&#39;s take a look at some of the most common threats that face web browsers.</p><h3 id="xss-01-04-01-30" tabindex="-1"><a class="header-anchor" href="#xss-01-04-01-30"><span>XSS 01:04-01:30</span></a></h3><p>Cross-Site Scripting, also known as XSS, is a vulnerability on a legitimate website where an attacker uses the trust relationship you have with the product or brand to prompt you to give out sensitive information, such as your credit card number.</p><p>For example, you&#39;re on a website you trust, such as an online store where you shop all the time, and the attacker uses a script to prompt you for personal information. Since you trust this website, you wouldn&#39;t give this a second thought.</p><h3 id="plugins-01-30-02-12" tabindex="-1"><a class="header-anchor" href="#plugins-01-30-02-12"><span>Plugins 01:30-02:12</span></a></h3><p>Another web threat is third-party plugins or add-ons. These are applications used on the web browser. Plugins can contain programming or design flaws that make them vulnerable to threats.</p><p>Adobe Flash is a good example. In earlier versions, before 9.0.115.0, it was prone to a remote buffer-overflow vulnerability. Attackers could take advantage of that and prompt a user to open a corrupted multimedia file, allowing them to execute arbitrary code. This issue has been fixed in all posterior versions of Adobe Flash Player.</p><p>This is another reminder of how important it is to keep your plugins up-to-date with the latest version. You will also need to decide if a specific plugin is, in fact, necessary, and being installed from a trustworthy website.</p><h3 id="injection-flaws-02-12-02-50" tabindex="-1"><a class="header-anchor" href="#injection-flaws-02-12-02-50"><span>Injection Flaws 02:12-02:50</span></a></h3><p>Injection flaws are another threat you need to watch for. The most common is an SQL injection flaw, when there is a failure to filter untrusted input or data being passed to database. When the attacker gets access to a database, they can inject commands to access sensitive information. This can ultimately result in loss of data or even browser hijacking. Injections can also happen against XML or LDAP.</p><p>To prevent this, properly filter all input, preferably using a whitelist. By using a whitelist, you ensure access only to allowed entities. Input validation is essential to prevent injection flaws.</p><h3 id="password-vaults-02-50-03-59" tabindex="-1"><a class="header-anchor" href="#password-vaults-02-50-03-59"><span>Password Vaults 02:50-03:59</span></a></h3><p>Password vaults are applications that store passwords for different accounts in a single protected database. Password vaults can be local--for instance, with Apple devices, you can store all passwords for accounts you access inside the Keychain. Or the password vault can be provided by a third party, where you install a plugin on your browser and create one master password to access all other passwords you register inside the vault.</p><p>When you use this feature, either locally or through a third party, you are prompted to keep your login credentials inside the vault every time you access a new account using your browser. This would mean that whenever you come back to that specific website the user and password fields will be automatically be filled out for you, so anyone with access to your computer can use all of your passwords.</p><p>Some password vaults will request your master password before filling out the credentials, which can be safer, but it is important to use complex passwords and change them periodically. It is also extremely important to set up two-factor authentication if you use a password vault. Doing so decreases the likelihood that the account will become compromised. And, just as with other plugins, be sure to keep your password vault application up-to-date.</p><h3 id="outdated-browsers-03-59-04-35" tabindex="-1"><a class="header-anchor" href="#outdated-browsers-03-59-04-35"><span>Outdated Browsers 03:59-04:35</span></a></h3><p>An outdated browser is one of the most dangerous threats to a network. Older browsers have countless security holes that, if unpatched, are super-easy entry points for an attacker. If you are not using the latest version or if you don&#39;t install a current patch, you may be at risk.</p><p>Also, know that some older versions of browsers are no longer supported by their creators. These browsers are known as being end-of-life. And end-of-life browser means is longer updated or maintained by the company that created it. Examples include IE6 and IE7.</p><p>Never use a browser that is outdated or end-of-life, as this poses a serious security threat.</p><h3 id="cookies-04-35-05-01" tabindex="-1"><a class="header-anchor" href="#cookies-04-35-05-01"><span>Cookies 04:35-05:01</span></a></h3><p>Cookies are files that store data for specific websites. This data may contain information about your browsing habits and preferences, or even your email account and favorite sites. They can be saved for any length of time, sometimes for as long as the browser is open, or even after you close it.</p><p>If an attacker has access to these, they will be able to gather personal information. It is important to review the security settings for cookie storage on your computer.</p><h3 id="mitigate-the-risk-05-01-07-41" tabindex="-1"><a class="header-anchor" href="#mitigate-the-risk-05-01-07-41"><span>Mitigate the Risk 05:01-07:41</span></a></h3><p>It&#39;s your job as a security administrator to know about these threats and understand what you must do to protect and mitigate the risks associated with web browsers.</p><p>One way is to make sure the computers in your organization have a good antivirus program installed and kept up-to-date. This will keep your browser safer and scan any file being exchanged for incoming threats. Some companies also offer a browser extension version, where the antivirus will constantly scan for any malware when you are using the web browser.</p><p>You can also install adblockers and enable pop-up blockers. This helps prevent certain types of attacks and phishing attempts.</p><p>Disabling JavaScript is another way to mitigate threats. JavaScript is a language used to make websites more interactive. It uses scripts to execute programs within the web browser, providing a way for attackers to download or execute malicious code on a user&#39;s computer. There are other web scripts, such as VBScript and ECMAScript, that you need to watch out for.</p><p>One issue with disabling it is that it may limit functionality and break the features of some sites you visit. You can disable the active content before visiting a site you don&#39;t trust.</p><p>One way to protect your environment is implementing DNSSEC, or DNS Security Extensions. DNSSEC is a security measure that only allows servers with a digital certificate to connect to your computer. This protects you from attacks, since only trusted website connections are allowed.</p><p>HTTPS is another safety measure. This transfer protocol encrypts the HTTP over Transport Layer Security (TLS) or Secure Socket Layer (SSL), protecting your browser against threats.</p><p>HTTPS is normally used for connections containing sensitive information, such as when accessing your bank, email, et cetera. But lately, it has been more widely used for any client-server connection. This encryption protects you against attacks and interception of sensitive information because it uses a digital certificate that the server you are accessing needs to register for.</p><p>Using SSL adds the security of encrypting all of the underlying protocol on the website, such as cookies and headers.</p><p>To determine whether a website you are accessing is using this safer protocol, you can notice if the URL is green. This means that it is using a valid digital certificate. There will also be a padlock symbol by the URL. If you click on it, you will see a message saying that the &quot;Encryption with a digital certificate keeps information private&quot; with the option to even see the certificate in more detail. These details contain information such as the organization name, the expiration date, the certificate authority (also known as CA), the country, DNS name, and much more.</p><h3 id="summary-07-41-08-02" tabindex="-1"><a class="header-anchor" href="#summary-07-41-08-02"><span>Summary 07:41-08:02</span></a></h3><p>As you can see, web browsers pose a significant threat to an organization. And because so much of today&#39;s work is done via the internet, it&#39;s impossible to simply disable a computer&#39;s web browser. Instead, you need to educate yourself on the various web browser threats and properly protect your network from them.</p><h2 id="_10-3-9-web-browser-security-facts" tabindex="-1"><a class="header-anchor" href="#_10-3-9-web-browser-security-facts"><span>10.3.9 Web Browser Security Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>Manage browser data</li><li>Enhance browser privacy</li></ul><h3 id="manage-browser-data" tabindex="-1"><a class="header-anchor" href="#manage-browser-data"><span>Manage Browser Data</span></a></h3><p>A web browser is an application for retrieving and displaying information on the internet. Web browsers present the possibility of security breaches into an organization&#39;s network. There are general actions and browser-specific actions you can take to help harden the network against attacks from the internet.</p><p>When using a browser, the following might indicate an unsecured connection or an attack.</p><ul><li> A web document with a URL that contains a new or different domain name than the site you intended to visit. </li><li> A menu bar that includes new commands or is missing common commands. </li><li> The status line of the browser displays an unlocked symbol when SSL should be in use. </li></ul><p>Regardless of the browser you are using, clear your private data regularly. Private data can be cleared based on the data&#39;s age. You can clear data from the last few hours, the last few weeks, or all time. The type of browser you are using and the types of sites you have visited, will determine the type of data that can be cleared. Most browsers let you clear the following data:</p><ul><li> Browsing history </li><li> Download history </li><li> Cookies and other site data </li><li> Cached images and files </li><li> Passwords </li><li> Autofill form data </li><li> Site permissions </li><li> Hosted app data </li></ul><p>The following table lists steps for each browser to clear data.</p>',253),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"},"Browser"),e("th",{scope:"col",class:"fw-bold"},"Steps")])]),e("tbody",null,[e("tr",null,[e("td",null,"Google Chrome"),e("td",null,[t(" Steps for the Google Chrome browser are: "),e("ol",null,[e("li",null,"Select the ellipses (three dots) button on the menu bar."),e("li",null,"Go to History > History."),e("li",null,[t(" Select "),e("b",{class:"fw-bold"}," Clear browsing data "),t(" . ")])])])]),e("tr",null,[e("td",null,"Microsoft Edge"),e("td",null,[t(" Steps for the Microsoft Edge browser are: "),e("ol",null,[e("li",null,"Select the ellipses (three dots) button on the menu bar."),e("li",null,"Go to History."),e("li",null,[t(" Select "),e("b",{class:"fw-bold"}," Clear Browsing Data. ")])])])]),e("tr",null,[e("td",null,"Internet Explorer"),e("td",null,[t(" Steps for the Internet Explorer browser are "),e("ol",null,[e("li",null,"Select the Tools (gear) icon from the menu bar."),e("li",null,"Select Internet Options."),e("li",null,"Go to Browsing history."),e("li",null,[t(" Select "),e("b",{class:"fw-bold"}," Delete "),t(" . ")])])])])])],-1),e("h3",{id:"enhancing-browser-privacy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#enhancing-browser-privacy"},[e("span",null,"Enhancing Browser Privacy")])],-1),e("p",null,"You can use the following browser settings and guidelines to enhance browsing privacy and security. These may be named and implemented differently in different browsers, but the general ideas are the same.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Settings "),e("th",{scope:"col",class:"fw-bold"},"Description")])]),e("tbody",null,[e("tr",null,[e("td",null,"Cookies"),e("td",null,[e("i",{class:"fs-italicize"}," Cookies "),t(" are text files that save information about preferences, browser settings, and web page preferences. They identify you (or your browser) to websites. Be aware of the following facts about cookies: "),e("ul",null,[e("li",null," Cookies aren't inherently malicious and are often necessary for e-commerce websites. "),e("li",null," The use of cookies can constitute a privacy violation because cookies can retain personal information. A hacker could gain access to this information. "),e("li",null," Cookies can be misused by malware to collect and report your web surfing activities. "),e("li",null,[e("i",{class:"fs-italicize"}," First-party cookies "),t(" are cookies used by the site you are visiting. ")]),e("li",null,[e("i",{class:"fs-italicize"}," Third-party cookies "),t(" are cookies placed by sites linked to the site you are visiting. For example, banner ads on a website might place cookies on the machine to identify ads already seen or ads opened. ")])]),t(" Secured environments should restrict the use of cookies on all web browsers and other internet service utilities. Cookies can usually be found in the user profile in the file system. ")])]),e("tr",null,[e("td",null,"Cache"),e("td",null,[t(" A "),e("i",{class:"fs-italicize"}," cache "),t(" is storage location for information that will be used again, such as images, sounds, web pages, and even usernames and passwords used on websites. In addition to taking up space, data in the cache could be retrieved by someone with access to the computer. To provide some level of protection, you should clear the web browser cache whenever you use a public computer to access the internet, especially when you have accessed sites for retrieving personal data. ")])]),e("tr",null,[e("td",null,"Security"),e("td",null,[t(" Enable the following options to increase security: "),e("ul",null,[e("li",null,"Warn me when sites try to install add-ons."),e("li",null,"Block reported attack sites."),e("li",null,"Block reported web forgeries.")]),t(" It is best practice to always enter passwords and to not have the browser remember them. "),e("ul",null,[e("li",null,[t(" Do not select the "),e("strong",{class:"fw-bold"}," Remember passwords for sites "),t(" option. ")]),e("li",null,[t(" Do not select the "),e("strong",{class:"fw-bold"}," Use a master password "),t(" option. When you select this option, all passwords saved on the system are encrypted. You create a master password that retrieves and unencrypts passwords for individual sites. ")])])])]),e("tr",null,[e("td",null,"Add-ons"),e("td",null,[t(" An "),e("i",{class:"fs-italicize"}," add-on "),t(" , also known as a "),e("i",{class:"fs-italicize"}," plug-in "),t(" or "),e("i",{class:"fs-italicize"}," browser extension "),t(" , is a program that adds functionality and features to a web browser, including extra toolbars and interactive web content. Over time, a browser collects add-ons, some of which could have malicious intent. Secure the browser by reviewing add-ons and uninstalling items that are not appropriate for the environment. "),e("ul",null,[e("li",null,[e("i",{class:"fs-italicize"}," Disabling "),t(" an add-on disables it for the current user. This allows users to enable or disable add-ons based on their own needs. ")]),e("li",null,[e("i",{class:"fs-italicize"}," Deleting "),t(" an add-on removes it from the system and prevents any user from using it. ")])])])]),e("tr",null,[e("td",null,"General"),e("td",null,[t(" General information for web browser security includes: "),e("ul",null,[e("li",null,[t(" Use the "),e("strong",{class:"fw-bold"}," Always ask me where to save files "),t(" option to avoid having files download without your knowledge. By using this option, you will always know when a file is being downloaded to the system. ")]),e("li",null,[t(" Enable the "),e("strong",{class:"fw-bold"}," Block Pop-up windows "),t(" option. ")]),e("li",null,[t(" Turn off "),e("strong",{class:"fw-bold"}," Remember search and form history "),t(" . Data you enter into forms, such as your banking account number, will be stored if this option is on. ")]),e("li",null,[t(" Turn off "),e("strong",{class:"fw-bold"}," Accept third-party cookies "),t(" or accept cookies and specify "),e("strong",{class:"fw-bold"}," ask me every time "),t(" so you will know when third-party cookies are created. ")])])])])])],-1),a('<h2 id="_10-3-11-preventing-cross-site-scripting" tabindex="-1"><a class="header-anchor" href="#_10-3-11-preventing-cross-site-scripting"><span>10.3.11 Preventing Cross-Site Scripting</span></a></h2><h3 id="preventing-cross-site-scripting-00-00-00-35" tabindex="-1"><a class="header-anchor" href="#preventing-cross-site-scripting-00-00-00-35"><span>Preventing Cross-Site Scripting 00:00-00:35</span></a></h3><p>In this demo, we&#39;re going to look at some steps you can take to protect yourself from cross-site scripting attacks, or XSS attacks. Even though it&#39;s possible for XSS attacks to use HTML, flash, or other browser-executed code, one of the primary vehicles XSS uses is JavaScript. Because of this, we&#39;re going to look at how to disable JavaScript in IE, Chrome, and Firefox. We&#39;ll also look at some other settings that will make it more difficult for XSS attacks to succeed.</p><h3 id="disable-javascript-in-internet-explorer-00-35-01-44" tabindex="-1"><a class="header-anchor" href="#disable-javascript-in-internet-explorer-00-35-01-44"><span>Disable JavaScript in Internet Explorer 00:35-01:44</span></a></h3><p>Let&#39;s start with IE. The first thing we want to look at is the Stay logged in option that&#39;s found on almost every site. We&#39;ll go to a site with login and look at it. Keeping this option selected when logging in to a site is dangerous. A lot of XSS attacks take advantage of browsers that retain login sessions.</p><p>Another option we want to disable is the storage of usernames and passwords. Again, some XSS attacks take advantage of login credentials stored on the computer. We&#39;ll disable the saving of passwords and click OK.</p><p>Next, we want to go to the Security tab. On the Internet zone, click Custom level. Scroll down. Under scripting, we want to find Active scripting and set it to Disable. Click OK. Yes. Now let&#39;s test it out. Go to msn.com and click Sign in. Look at the notification here. Many sites require JavaScript to function properly. This is one of the problems with globally disabling JavaScript—&quot;it&#39;s everywhere. Make sure you understand the risks associated with disabling it completely before you do it.</p><h3 id="disable-javascript-in-chrome-01-44-02-16" tabindex="-1"><a class="header-anchor" href="#disable-javascript-in-chrome-01-44-02-16"><span>Disable JavaScript in Chrome 01:44-02:16</span></a></h3><p>Let&#39;s open Chrome and see how we can disable JavaScript there. Open Settings, scroll down to Autofill, and select Passwords. Remember, we want to disable the saving of passwords, so we&#39;ll do that here. We can also disable automatic sign-in. Let&#39;s go to Site settings. Scroll down. This is where we can disable JavaScript. Right now, it&#39;s enabled. Let&#39;s disable it. If we wanted, we could add exceptions here, but we won&#39;t worry about that for now.</p><h3 id="disable-javascript-in-firefox-02-16-04-24" tabindex="-1"><a class="header-anchor" href="#disable-javascript-in-firefox-02-16-04-24"><span>Disable JavaScript in Firefox 02:16-04:24</span></a></h3><p>Now let&#39;s open Firefox and disable JavaScript in a different way. We&#39;re actually going to use a popular add-on called NoScript. This add-on gives you more control over how JavaScript is disabled on websites, which is nice.</p><p>We&#39;ll go ahead and install the add-on. I&#39;ve already installed it to save time, but you would need to click Add to Firefox where this Remove button currently is.</p><p>Notice the NoScript icon here. If I go to a website, you can see that when I click it, we have the option to disable different components on this site as well as allow scripts globally. Let&#39;s click Options. On the Whitelist tab, notice that there are already a bunch of sites added to this list. The nice thing about this add-on is that it has a list of sites that are deemed safe. This means it won&#39;t block scripts on these sites and affect regular browsing. We also don&#39;t have to spend the time adding multiple exceptions.</p><p>Let&#39;s go ahead and close this window, then test the add-on. Go to msn.com. Since msn.com is added to the whitelist, it loads just fine. We&#39;ll click Sign in. As you can see, we&#39;re able to log in because this site was included in the long list of preconfigured safe sites.</p><p>If we decide we actually do want to block this site, we can click the icon up here and add live.com to Untrusted. When we do that and refresh the page, we can see that JavaScript is disabled. Notice we have additional options for re-enabling JavaScript now. We can temporarily trust live.com or trust it indefinitely. We can temporarily trust just this page or trust scripts globally. Let&#39;s re-allow the domain and refresh. We have to delete this part of the URL. Hit Enter. Now JavaScript is working.</p><h3 id="summary-04-24-04-49" tabindex="-1"><a class="header-anchor" href="#summary-04-24-04-49"><span>Summary 04:24-04:49</span></a></h3><p>That&#39;s it for this lesson. In this demo, we looked at the steps you can take to protect yourself from XXS attacks. We looked at clearing the Stay logged in check box on websites. We talked about preventing browsers from saving login credentials. We also discussed how to disable JavaScript in IE, Chrome, and Firefox using the NoScript add-on.</p><h2 id="_10-3-12-sql-injections" tabindex="-1"><a class="header-anchor" href="#_10-3-12-sql-injections"><span>10.3.12 SQL Injections</span></a></h2><h3 id="sql-injection-00-00-00-52" tabindex="-1"><a class="header-anchor" href="#sql-injection-00-00-00-52"><span>SQL Injection 00:00-00:52</span></a></h3><p>SQL injection attacks are powerful and complex. They&#39;re the tool behind many successful high-profile internet security breaches.</p><p>In 2011, Sony was targeted by an SQL injection attack that compromised over a million emails, usernames, and passwords. In 2013, the United Stated Department of Energy was targeted, and at least 100,000 employee records were compromised. These records included contact information, social security numbers, and even bank account numbers. Perhaps the most ironic attack occurred when mysql.com was attacked, releasing a large list of usernames and passwords to hackers. In each of these instances, the vulnerability wasn&#39;t in the SQL software, but in the way the websites and applications were implemented. Each of these attacks could have been prevented with careful front-end configuration and penetration testing.</p><h3 id="how-web-applications-work-00-52-01-22" tabindex="-1"><a class="header-anchor" href="#how-web-applications-work-00-52-01-22"><span>How Web Applications Work 00:52-01:22</span></a></h3><p>Because the SQL injection attacks target web applications, let&#39;s review how they work. When a user connects to a web application, they make a request through the browser. This request travels over the internet and to the web server. The web server accepts the request and sends it to the corresponding web app.</p><p>The web application accesses the database, completes the requested task, and then responds to the web server.</p><p>Once the transaction is complete, the web server sends the requested information to the user&#39;s browser.</p><h3 id="databases-01-22-02-48" tabindex="-1"><a class="header-anchor" href="#databases-01-22-02-48"><span>Databases 01:22-02:48</span></a></h3><p>Because attackers are seeking information stored in the database, we also need to review how those work. Databases store all sorts of information, including application data, configuration data, customer data, login information, and--well--the possibilities are endless, so you can imagine why databases are valuable targets.</p><p>A database is typically described by the way it stores data. A relational database can be organized in different ways, depending on need. For example, customer orders can be sorted by customer number, zip code, or product number. A distributed database is designed so it&#39;s easy to replicate to various locations across a network. An object-oriented database is designed around object classes and sub-classes.</p><p>Inside these databases are various methods used to organize, manage, and retrieve data. Records and rows are used to represent a collection of relative data, such as information about a product, a user, or a customer. Think about the times you&#39;ve gone shopping online, and you&#39;ve sorted your selection by color, cost, or rating. These filters are possible because of these databases. When you think about the number of times you&#39;ve entered contact information, account information, or other personal information, you can start to understand how valuable these stores of data are.</p><p>SQL was specifically designed to request data from a database. These requests take the form of a query--a question--that asks the database to provide information specific to your request.</p><h3 id="how-an-sql-injection-works-02-48-05-42" tabindex="-1"><a class="header-anchor" href="#how-an-sql-injection-works-02-48-05-42"><span>How an SQL Injection Works 02:48-05:42</span></a></h3><p>It&#39;s important to note that SQL injections are a result of flaws in web applications, not in the database or the web server. These attacks exploit non-validated input vulnerabilities and use them to send SQL commands through the web application and to the database. This is done by injecting a code into an existing line of code before sending it onto the database for execution. If the injection is successful, the malicious code runs on the backend database and returns the requested information.</p><p>So, how does an SQL injection work? Let&#39;s start with a very basic example.</p><p>Let&#39;s say you&#39;re logging into your account. Normally, the user will enter their username-bobsmith--and their password-secret--into the appropriate spaces. Once they click Submit, the web application will send a string to the web server that contains the credentials.</p><p>The command tells the database to check for the provided username and compare it to the stored password before granting access. Assuming that the user is found, they&#39;re directed to the requested page. As you can see, the data that the user entered is put into the same query as the commands. As a result, this code is susceptible to SQL injection attacks. If the login fields haven&#39;t been restricted, an attacker can add anything they want to them.</p><p>Let&#39;s say the attacker knows that Bob&#39;s username is bobsmith, but they don&#39;t know Bob&#39;s password. They may be able to enter &#39;bobsmith&#39;--&#39;in the username field. The single quote indicates that data has ended and a command is beginning. The double dashes indicate that code is ending and a comment is being entered. Comments are code that a program doesn&#39;t execute--they usually contain explanations or reminders for the programmer. Because of this, the application knows to ignore the comments.</p><p>Now, because the command treats everything after the dashes as comments, the instruction to verify the username with a given password is no longer visible, and the user is granted access to the user account.</p><p>Although it&#39;s fairly easy to detect the initial vulnerabilities for this attack, SQL injections are extremely complex. They require a lot of patience and a high level of database and coding expertise. So, why would attackers go to all this trouble? Well, with great effort comes great reward, and that&#39;s what these attackers are counting on. SQL injections can be used to implement several types of attacks.</p><p>When an attacker attempts an authentication bypass, they log into an application with administrative privileges without having to give a valid username or password. An information disclosure attack provides an attacker with sensitive information from the database. An attacker can use a compromised data integrity attack to deface a web page or alter a database&#39;s contents. Attackers can use an SQL injection attack to compromise data&#39;s availability; in other words, they can use it to delete information stored in the database. Attackers can also use this type of attack to remotely execute code and compromise the host operating system.</p><h3 id="summary-05-42-05-54" tabindex="-1"><a class="header-anchor" href="#summary-05-42-05-54"><span>Summary 05:42-05:54</span></a></h3><p>Well, that&#39;s all for this lesson. We talked about SQL injections and how they relate to web application and database technologies.</p><h2 id="_10-3-13-exploit-sql-on-a-web-page" tabindex="-1"><a class="header-anchor" href="#_10-3-13-exploit-sql-on-a-web-page"><span>10.3.13 Exploit SQL on a Web Page</span></a></h2><h3 id="exploit-sql-on-a-web-page-00-00-01-02" tabindex="-1"><a class="header-anchor" href="#exploit-sql-on-a-web-page-00-00-01-02"><span>Exploit SQL on a Web Page 00:00-01:02</span></a></h3><p>The internet used to be pretty simple and straightforward. There was no JavaScript, Flash, CSS, backend databases, or, really, any complex web design technologies. That&#39;s all changed, and it&#39;s changing more rapidly than ever. These days, most websites are dynamic and database-driven. Site content is dependent on user input most of the time, and that data is written to a database, typically an SQL database. Like every other piece of computing technology that&#39;s invented to solve a problem, hackers have figured out how to attack these databases.</p><p>The term for attacking an SQL database is an SQL injection. It&#39;s a very common way to attack databases. The Open Web Application Security Project, OWASP, almost always includes weak SQL databases in their list of the top ten most widely exploited vulnerabilities.</p><p>In this demo, we&#39;re going to cover a few SQL injections on a vulnerable web page. This isn&#39;t a demo on SQL in general. We&#39;re just taking a quick look at some things to be aware of as a penetration tester or ethical hacker.</p><h3 id="our-setup-01-02-01-27" tabindex="-1"><a class="header-anchor" href="#our-setup-01-02-01-27"><span>Our Setup 01:02-01:27</span></a></h3><p>I&#39;m on a Windows 10 system. I&#39;ve already done a few things to it. First, I&#39;ve downloaded and installed XAMPP, which is a package that contains Apache, Maria Data Base, PHP, and Perl. I&#39;ve also downloaded and configured the Darn Vulnerable Web Application, DVWA, which is a vulnerable PHP and MySQL web application designed for security professionals to practice their penetration testing and ethical hacking skills.</p><p>Find Username Accounts with SQL Injection 01:27-02:15 First, we want to do a few simple injections. Let&#39;s start out by typing in a number, number 1. Click Submit. Now let&#39;s type in 2 and click Submit. All this does is give you the user ID, first name, and surname. That&#39;s not very useful, but it does show that it&#39;s not designed very well. We want to get more than that, so let&#39;s expand on our SQL injection.</p><p>We&#39;re going to enter code to pull up records for a specific user. By crafting our input, we can get more from the output than the code author intended. So, let&#39;s enter in the number 1, which is the user ID, with a single quote followed by a true statement. Our true statement can be anything that&#39;s true, such as 1 is equal to 1. It will look like this: ‘1&#39; and 1=1#&#39;. Click Submit. We see the first name and the surname for that user.</p><h3 id="find-the-database-name-and-username-02-15-02-40" tabindex="-1"><a class="header-anchor" href="#find-the-database-name-and-username-02-15-02-40"><span>Find the Database Name and Username 02:15-02:40</span></a></h3><p>Now let&#39;s go a little further. Let&#39;s say we want to find out our database name and username for the database. For that, I&#39;ll do a select statement by entering in ‘1&#39; and 1=1 union select database(), user()#&#39;and press Enter. Now, down here, I get the name of my database, which is dvwa, and the username is root@localhost.</p><h3 id="find-a-list-of-tables-02-40-03-15" tabindex="-1"><a class="header-anchor" href="#find-a-list-of-tables-02-40-03-15"><span>Find a List of Tables 02:40-03:15</span></a></h3><p>I want to see if I can get a list of tables from our database. For that, I&#39;ll do another select statement and enter in ‘1&#39; and 1= union select null, table_name from information_schema.tables#&#39; and press Submit. Okay. I just got a long list of tables here. I&#39;m looking for something that might have a list of usernames and passwords in it. Right here, I see a table called users, so I wonder if that might be the list of users along with their passwords? There&#39;s one way to find out: let&#39;s see if we can pull information from that table.</p><h3 id="find-usernames-and-passwords-from-a-table-03-15-03-35" tabindex="-1"><a class="header-anchor" href="#find-usernames-and-passwords-from-a-table-03-15-03-35"><span>Find Usernames and Passwords from a Table 03:15-03:35</span></a></h3><p>To pull the information out of the Users table, I&#39;ll enter in the following select statement: ‘1&#39; and 1= union select user password from users#&#39; and click Submit. Here, you can see a nice list of the usernames along with the password hashes for each one. Now we can use a cracking program to attempt to crack any of these hashes.</p><h3 id="summary-03-35-03-58" tabindex="-1"><a class="header-anchor" href="#summary-03-35-03-58"><span>Summary 03:35-03:58</span></a></h3><p>And that&#39;s it for this demo. In this demo, we used a vulnerable website to practice some SQL injections. First, we found a list of users. Then we expanded to find the name of the database and the username. We ended by finding a list of tables, specifically the user table, and then retrieved the usernames and password hashes from that table.</p><h2 id="_10-3-14-web-application-attack-facts" tabindex="-1"><a class="header-anchor" href="#_10-3-14-web-application-attack-facts"><span>10.3.14 Web Application Attack Facts</span></a></h2><p>People today connect, learn, shop, provide services and information, and do business over the internet. All of this is made possible through web browsers and web applications. There are literally thousands of applications that are used in our everyday lives. With so many options, there are many ways that attackers have found to exploit them.</p><p>This lesson covers the following topics:</p><ul><li> Privilege escalation </li><li> Pointer/object dereference </li><li> Buffer overflows </li><li> Resource exhaustion </li><li> Memory leaks </li><li> Race conditions </li><li> Error handling </li><li> Improper input handling </li><li> Replay attacks </li><li> Pass the hash </li><li> Application programming interface (API) attacks </li><li> Secure Sockets Layer (SSL) stripping </li><li> Driver manipulation </li></ul><h3 id="privilege-escalation" tabindex="-1"><a class="header-anchor" href="#privilege-escalation"><span>Privilege Escalation</span></a></h3><p>Most attacks are some form of privilege escalation. There are two types:</p><ul><li> Horizontal <ul><li> This is when an attacker gains data that belongs to another user with the same privilege level as themselves (like a co-worker). </li></ul></li><li> Vertical <ul><li> This is when an attacker uses a system vulnerabilities to escalate privileges to gain administrative access. </li></ul></li></ul><h3 id="pointer-object-dereference" tabindex="-1"><a class="header-anchor" href="#pointer-object-dereference"><span>Pointer/Object Dereference</span></a></h3><p>Dereferencing a pointer is retrieving the value stored in memory.</p><p>Some important facts:</p><ul><li>A pointer stores a memory address</li><li> All operating systems embed the kernel in the user&#39;s workspace <ul><li> The kernel is the operating system&#39;s core program that controls everything in the system </li></ul></li><li> Page protections protect the kernel from user access but can be exploited through by a DoS attack through a NULL pointer dereference </li><li> If a DMA driver module does not have enough security protections in place, it can release user pages that are pinned to a pointer with a NULL value. This happens when: <ul><li> An app dereferences an object that comes back NULL instead of valid </li><li> Null is exploited as a constant built in to evaluate to 0 in the C language </li><li> An x86 system has a valid 0 address in the kernel address space </li></ul></li></ul><h3 id="buffer-overflows" tabindex="-1"><a class="header-anchor" href="#buffer-overflows"><span>Buffer Overflows</span></a></h3><p>Buffer overflow important facts:</p><ul><li>A buffer is a temporary data storage area with limited space</li><li> Overflows occur when more data is attempting to be stored than the program was written for </li><li> Can allow hackers to cause data to flow to other memory areas that may not be protected <ul><li> Attackers may now access database files or system files and can replace executable code with malicious code. This is called arbitrary code execution. </li></ul></li><li> Can cause DoS attacks by crashing the program <ul><li>Can occur in routers, IoT devices, and firewalls</li></ul></li></ul><h3 id="resource-exhaustion" tabindex="-1"><a class="header-anchor" href="#resource-exhaustion"><span>Resource Exhaustion</span></a></h3><p>Resource exhaustion is a form of attack that focuses on depleting the resources of a network to create a denial of service to legitimate users.</p><p>This attack can be done through:</p><ul><li> Slow header attacks: <ul><li> Send HTTP headers so slowly it prevents other users from accessing the site </li><li>Can be prevented with HTTP header timeouts</li></ul></li><li> Slow post attacks: <ul><li> Send HTTP POST body very slowly. This is done through forms, logins, and feedback input fields </li><li> Can be prevented by setting a maximum body size for each form and setting the web server setting with a max total transfer time </li></ul></li></ul><p>Resource exhaustion attacks can be focused on memory, file system storage, database-connection pool entries, or the CPU. When allocation of these resources is requested but the size of the resource or number is not controlled, a denial of service results from lack of resources.</p><h3 id="memory-leak" tabindex="-1"><a class="header-anchor" href="#memory-leak"><span>Memory Leak</span></a></h3><p>A memory leak happens when dynamic memory is allocated in a program, but no pointers are connected to it. This causes it to never be returned when requested.</p><ul><li> Programmers often create temporary memory allocations. This becomes a problem when they are not deleted after use. </li><li> Whether unintentionally leftover from a project or intentionally created by an attacker, memory leaks can result in: <ul><li>Resource exhaustion</li><li>DoS</li><li>Exploitation of other areas affected by low-memory conditions</li></ul></li></ul><p>To mitigate these attacks:</p><ul><li> Delete unneeded memory allocations when finished with a project </li><li> Ensure that pointers are properly connected to memory values </li></ul><h3 id="race-conditions" tabindex="-1"><a class="header-anchor" href="#race-conditions"><span>Race Conditions</span></a></h3><p>Another web application vulnerability is a time-of-check to time-of-use bug, or (TOCTTOU) bug. This happens when a system is programmed to run with certain processes dependent on a sequence of events or race conditions.</p><ul><li> Can happen when an attacker schedules an execution of operation between a time of check and a time of use and forces the user’s process to pause or send an error. For example, in the moment between authenticating to a system and utilizing the system, the attacker can jump into the process and act as the authenticated user, leading to privilege escalation. <ul><li> To mitigate: <ul><li> Ensure your operating system&#39;s file system state is not allowed to change between two system calls </li><li> Use file system calls that run on file handles instead of file names when possible </li><li>Lock single files before the check</li></ul></li></ul></li></ul><h3 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h3><p>Improper error handling can create vulnerabilities in a system by revealing information that attackers can use to exploit the system. This display of too much information can result from coding practices that are not in alignment with security policies. Some examples are:</p><ul><li> An attacker may use a SQL injection attack that fails initially. But the error message discloses the malformed query, which could show the query logic or other sensitive data, like passwords. The attacker can use the new information from the error message to gain access to the system. </li><li> The disclosure of the full pathname in an error message that is generated from a path-transversal weakness exploit attempt. </li></ul><p>To mitigate, be sure to program the error message with minimal information that&#39;s only useful to the intended audience</p><h3 id="improper-input-handling" tabindex="-1"><a class="header-anchor" href="#improper-input-handling"><span>Improper Input Handling</span></a></h3><p>Improper input handling refers to lack of validation, sanitization, filtering, decoding input data, or encoding input data.</p><p>Processing of untrustworthy input data can lead to:</p><ul><li> Buffer overflows </li><li> XSS </li><li> Directory transversal </li><li> NULL byte injections </li><li> SQL injection </li><li> Uncontrolled format string </li><li> DoS </li><li> OS commanding </li></ul><p>To mitigate:</p><ul><li> Set specific parameters for acceptable data forms and types </li><li> Accurately define data restrictions </li><li> Sanitizing, validate, and filter properly </li></ul><h3 id="replay-attack" tabindex="-1"><a class="header-anchor" href="#replay-attack"><span>Replay Attack</span></a></h3><p>Replay attacks happen when network traffic is intercepted by an unauthorized person who then delays or replays the communication to its original receiver, acting as the original sender. The original sender is unaware of this occurrence.</p><ul><li> Also known as session replay attacks </li><li> They are a type of man-in-the-middle attack </li></ul><p>To mitigate, implement:</p><ul><li> Strong digital signatures with timestamps </li><li> Session keys that are time-bound and process-bound </li><li> Sequence numbers </li><li> Program authentication systems to accept network packets that have valid timestamps and sequence numbers </li></ul><h3 id="pass-the-hash" tabindex="-1"><a class="header-anchor" href="#pass-the-hash"><span>Pass the Hash</span></a></h3><p>Pass the hash is so dangerous to an organization because once an attacker gains access, the whole organization can be compromised very quickly.</p><p>How it works:</p><ol><li> An attacker gains access to an individual computer through malware or other techniques </li><li> The attacker accesses the memory in the workstation to find stored hashes of other users that have used the workstation </li><li> The attacker uses the stored hashes to gain access to other workstations in search of a station that grants privilege escalation </li></ol><p>To mitigate:</p><ul><li> Use direct networking to prevent standard users and local admin users from having access to other user&#39;s workstations </li><li> Use Group Policy Object (GPO) Editor to disable Remote Desktop Connections in an Active Directory network </li><li> Limit domain admins access to only workstations with the same level of privileges </li><li> Create separate standard user level accounts for admins to use when accessing lower-level privilege machines </li></ul><h3 id="application-programming-interface-api-attacks" tabindex="-1"><a class="header-anchor" href="#application-programming-interface-api-attacks"><span>Application Programming Interface (API) Attacks</span></a></h3><p>Application programming interfaces (APIs) are the way businesses transfer information between systems within their organization or how a business communicates information to another organization. This is also a means of information transfer between companies and their customers as APIs are the way most applications communicate with websites.</p><p>Many APIs are openly published to promote customer usage and make interactions easy. But they do create an opportunity for a malicious user to exploit the interface to gain access to internal data and infrastructure. For example, an e-commerce site may use its API for product catalog pages on their website, in their mobile app, for a third-party reseller, and for search engine bots that bring customers to their website.</p><p>To mitigate potential API problems:</p><ul><li> Implement rate limiting. This limits the number of calls from a client within a time limit </li><li> Use security logs to detect and analyze unauthorized access attempts </li><li> Look for SQL injections. These happen when a SQL statement is entered in a data field and gets executed in the database </li><li> Make sure that program notifications are sent when there is an excess of error messages </li></ul><h3 id="secure-sockets-layer-ssl-stripping" tabindex="-1"><a class="header-anchor" href="#secure-sockets-layer-ssl-stripping"><span>Secure Sockets Layer (SSL) Stripping</span></a></h3><p>SSL stripping is an attack that focuses on stripping the security from HTTPS-enabled websites. This is how it works:</p><ol><li> An attacker intercepts the initial request a user sends to a website. </li><li> The attacker establishes a secure connection with the intended server and an unsecure HTTP connection with the user where all communication goes through him or her. </li><li> The attacker can intercept the initial request when it comes through a 302 redirect or through a non-SSL site that provides a link to a proxy that looks like the intended site. </li></ol><p>To mitigate:</p><ul><li> Encrypt all elements of your site with an SSL certificate. </li><li> Add your domain to the HSTS preload list. This lets browsers know that your site is secure. </li></ul><h3 id="driver-manipulation" tabindex="-1"><a class="header-anchor" href="#driver-manipulation"><span>Driver Manipulation</span></a></h3><p>A device driver is a small piece of software that provides an interface between the operating system and a hardware device such as a printer, keyboard, or network card. Attackers can manipulate a driver by adding malicious logic. Driver manipulation attacks often happen as a result of a web application attack such as a drive-by download or through social engineering or phishing. The goal is to replace a good driver with one that is malevolent or to add software that comes between a good driver and the operating system.</p><p>Common driver manipulation attacks include:</p>',119),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"},"Attack"),e("th",{scope:"col",class:"fw-bold"},"Description")])]),e("tbody",null,[e("tr",null,[e("td",null,"Refactoring"),e("td",null,[e("ul",null,[e("li",null," Software or code refactoring is usually considered a beneficial practice. The external behavior of refactored software code does not change. Internally, the code is modified to improve readability, reduce complexity, or improve efficiency. "),e("li",null," Attackers refactor device drivers so that their external behavior does not change. The printer, keyboard, network card, or hardware controlled by the driver still function properly. This makes it hard to detect any problems. Internally, the refactored driver now has hidden functions that benefit the attacker. ")])])]),e("tr",null,[e("td",null,"Shimming"),e("td",null,[e("ul",null,[e("li",null," Like refactoring, shimming is usually beneficial. As operating systems and other software libraries are updated, their application programming interface (API) may change. The API specifies how other programs should interact with the software library or operating system. If the API is updated with new specification, other programs using older API specifications may not work. To remedy this, a shim can be used. A shim is software that is placed between the newer API and software that conforms to the older API. The shim intercepts calls to the older API, translate them, and pass them to the newer API. In some cases, they can redirect the API calls elsewhere to complete the expected operation called for in the older API. "),e("li",null," Attackers can modify existing shims by injecting malicious code. They can also create a shim that intercepts valid API calls. However, the shim executes malicious code before it passes the valid calls through to the API. ")])])])])],-1),a("<p>To mitigate:</p><ul><li>Use the latest browser version and patch level.</li><li>Verify that the operating system is at the latest patch level.</li><li> Install antivirus, anti-spyware, pop-up blocking, and firewall software. </li><li> Use input validation when programming services. <ul><li> Client-side validation should first be used on the local system to identify input errors before the data is ever sent to the server. <ul><li> For example, if the user enters an invalid value in an email address field, the error can be detected before the data is submitted. </li></ul></li><li> Server-side validation should be used for error detection after the data is sent to the server. Experienced attackers can circumvent client-side validation techniques to send malicious information to the server. <ul><li> For example, an attacker could send data to the server from outside the application&#39;s standard user interface, bypassing any input validation measures that may have been implemented on the client. It is unwise to rely solely on client-side input validation techniques. </li></ul></li></ul></li><li> Implement DNS Security Extensions, or DNSSEC. This is a security measure that only allows connection to your computer from servers that have previously been given a digital certificate. </li><li> Use HTTPS. This transfer protocol encrypts the HTTP over Transport Layer Security (TLS) or over Secure Socket Layer (SSL), protecting your browser against threats. </li><li> Use add-ons to increase the security of browsing activities: <ul><li> NoScript blocks all active content except from sites you trust. </li><li> Adblock Plus blocks advertisements and ad banners (which could contain malicious code) on the internet. </li></ul></li><li> Train users to log out of websites when finished. Users should never allow applications to remember their authentication information. </li></ul>",2)]))}const d=i(r,[["render",l],["__file","10.03.WebApplicationAttacks.html.vue"]]),p=JSON.parse('{"path":"/10/10.03.WebApplicationAttacks.html","title":"Section 10.3 Web Application Attacks","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 10.3 Web Application Attacks","description":"some description"},"headers":[{"level":2,"title":"10.3.1 Web Application Attacks 1","slug":"_10-3-1-web-application-attacks-1","link":"#_10-3-1-web-application-attacks-1","children":[{"level":3,"title":"Web Application Attacks 00:00-00:32","slug":"web-application-attacks-00-00-00-32","link":"#web-application-attacks-00-00-00-32","children":[]},{"level":3,"title":"Privilege Escalation 00:32-01:09","slug":"privilege-escalation-00-32-01-09","link":"#privilege-escalation-00-32-01-09","children":[]},{"level":3,"title":"Pointer/Object Dereference 01:09-02:57","slug":"pointer-object-dereference-01-09-02-57","link":"#pointer-object-dereference-01-09-02-57","children":[]},{"level":3,"title":"Buffer Overflow Attacks 02:57-03:52","slug":"buffer-overflow-attacks-02-57-03-52","link":"#buffer-overflow-attacks-02-57-03-52","children":[]},{"level":3,"title":"Resource Exhaustion Attacks 03:52-05:10","slug":"resource-exhaustion-attacks-03-52-05-10","link":"#resource-exhaustion-attacks-03-52-05-10","children":[]},{"level":3,"title":"Memory Leak Attacks 05:10-05:49","slug":"memory-leak-attacks-05-10-05-49","link":"#memory-leak-attacks-05-10-05-49","children":[]},{"level":3,"title":"Race Conditions 05:49-06:51","slug":"race-conditions-05-49-06-51","link":"#race-conditions-05-49-06-51","children":[]},{"level":3,"title":"Summary 06:51-07:18","slug":"summary-06-51-07-18","link":"#summary-06-51-07-18","children":[]}]},{"level":2,"title":"10.3.2 Web Application Attacks 2","slug":"_10-3-2-web-application-attacks-2","link":"#_10-3-2-web-application-attacks-2","children":[{"level":3,"title":"Web Application Attacks Part 2 00:00-00:26","slug":"web-application-attacks-part-2-00-00-00-26","link":"#web-application-attacks-part-2-00-00-00-26","children":[]},{"level":3,"title":"Error Handling 00:26-01:20","slug":"error-handling-00-26-01-20","link":"#error-handling-00-26-01-20","children":[]},{"level":3,"title":"Improper Input Handling 01:20-02:36","slug":"improper-input-handling-01-20-02-36","link":"#improper-input-handling-01-20-02-36","children":[]},{"level":3,"title":"Replay Attacks 02:36-03:39","slug":"replay-attacks-02-36-03-39","link":"#replay-attacks-02-36-03-39","children":[]},{"level":3,"title":"Replay Attack Prevention 03:39-03:57","slug":"replay-attack-prevention-03-39-03-57","link":"#replay-attack-prevention-03-39-03-57","children":[]},{"level":3,"title":"API Protection 05:02-05:32","slug":"api-protection-05-02-05-32","link":"#api-protection-05-02-05-32","children":[]},{"level":3,"title":"Secure Sockets Layer (SSL) Stripping 05:32-07:12","slug":"secure-sockets-layer-ssl-stripping-05-32-07-12","link":"#secure-sockets-layer-ssl-stripping-05-32-07-12","children":[]},{"level":3,"title":"Driver Manipulation 07:12-08:09","slug":"driver-manipulation-07-12-08-09","link":"#driver-manipulation-07-12-08-09","children":[]},{"level":3,"title":"Pass the Hash Attacks 08:09-09:31","slug":"pass-the-hash-attacks-08-09-09-31","link":"#pass-the-hash-attacks-08-09-09-31","children":[]},{"level":3,"title":"Summary 09:31-10:02","slug":"summary-09-31-10-02","link":"#summary-09-31-10-02","children":[]}]},{"level":2,"title":"10.3.3 XSS and CSRF Attacks","slug":"_10-3-3-xss-and-csrf-attacks","link":"#_10-3-3-xss-and-csrf-attacks","children":[{"level":3,"title":"XSS and CSRF Attacks 00:00-00:27","slug":"xss-and-csrf-attacks-00-00-00-27","link":"#xss-and-csrf-attacks-00-00-00-27","children":[]},{"level":3,"title":"Cross-Site Scripting (XSS) Attacks 00:27-02:22","slug":"cross-site-scripting-xss-attacks-00-27-02-22","link":"#cross-site-scripting-xss-attacks-00-27-02-22","children":[]},{"level":3,"title":"Cross-Site Request Forgery (CSRF) Attacks 02:22-03:20","slug":"cross-site-request-forgery-csrf-attacks-02-22-03-20","link":"#cross-site-request-forgery-csrf-attacks-02-22-03-20","children":[]},{"level":3,"title":"How a CSRF Attack Works 03:20-04:48","slug":"how-a-csrf-attack-works-03-20-04-48","link":"#how-a-csrf-attack-works-03-20-04-48","children":[]},{"level":3,"title":"CSRF in Action 04:48-05:50","slug":"csrf-in-action-04-48-05-50","link":"#csrf-in-action-04-48-05-50","children":[]},{"level":3,"title":"CSRF Win Conditions 05:50-06:54","slug":"csrf-win-conditions-05-50-06-54","link":"#csrf-win-conditions-05-50-06-54","children":[]},{"level":3,"title":"A Blind Attack 06:54-07:42","slug":"a-blind-attack-06-54-07-42","link":"#a-blind-attack-06-54-07-42","children":[]},{"level":3,"title":"Preventing a CSRF Attack 07:42-09:24","slug":"preventing-a-csrf-attack-07-42-09-24","link":"#preventing-a-csrf-attack-07-42-09-24","children":[]},{"level":3,"title":"Summary 09:24-09:42","slug":"summary-09-24-09-42","link":"#summary-09-24-09-42","children":[]}]},{"level":2,"title":"10.3.4 Injection Attacks","slug":"_10-3-4-injection-attacks","link":"#_10-3-4-injection-attacks","children":[{"level":3,"title":"Injection Attacks 00:00-00:14","slug":"injection-attacks-00-00-00-14","link":"#injection-attacks-00-00-00-14","children":[]},{"level":3,"title":"LDAP Injection Attacks 00:14-01:21","slug":"ldap-injection-attacks-00-14-01-21","link":"#ldap-injection-attacks-00-14-01-21","children":[]},{"level":3,"title":"XML Injection Attacks 01:21-01:59","slug":"xml-injection-attacks-01-21-01-59","link":"#xml-injection-attacks-01-21-01-59","children":[]},{"level":3,"title":"Command Injection Attacks 01:59-02:45","slug":"command-injection-attacks-01-59-02-45","link":"#command-injection-attacks-01-59-02-45","children":[]},{"level":3,"title":"Directory Traversal 02:45-03:48","slug":"directory-traversal-02-45-03-48","link":"#directory-traversal-02-45-03-48","children":[]},{"level":3,"title":"Summary 03:48-04:01","slug":"summary-03-48-04-01","link":"#summary-03-48-04-01","children":[]}]},{"level":2,"title":"10.3.5 Header Manipulation","slug":"_10-3-5-header-manipulation","link":"#_10-3-5-header-manipulation","children":[{"level":3,"title":"Header Manipulation 00:00-00:19","slug":"header-manipulation-00-00-00-19","link":"#header-manipulation-00-00-00-19","children":[]},{"level":3,"title":"HTTP Protocol 00:19-01:03","slug":"http-protocol-00-19-01-03","link":"#http-protocol-00-19-01-03","children":[]},{"level":3,"title":"HTTP Response Splitting 01:03-01:46","slug":"http-response-splitting-01-03-01-46","link":"#http-response-splitting-01-03-01-46","children":[]},{"level":3,"title":"Cache Poisoning Attack 01:46-02:11","slug":"cache-poisoning-attack-01-46-02-11","link":"#cache-poisoning-attack-01-46-02-11","children":[]},{"level":3,"title":"Cache Poisoning Attack 02:11-02:37","slug":"cache-poisoning-attack-02-11-02-37","link":"#cache-poisoning-attack-02-11-02-37","children":[]},{"level":3,"title":"Cache Poisoning Prevention 02:37-02:57","slug":"cache-poisoning-prevention-02-37-02-57","link":"#cache-poisoning-prevention-02-37-02-57","children":[]},{"level":3,"title":"Cross-User Defacement 02:57-03:41","slug":"cross-user-defacement-02-57-03-41","link":"#cross-user-defacement-02-57-03-41","children":[]},{"level":3,"title":"Cookie Manipulation Attacks 03:41-04:44","slug":"cookie-manipulation-attacks-03-41-04-44","link":"#cookie-manipulation-attacks-03-41-04-44","children":[]},{"level":3,"title":"Summary 04:44-05:06","slug":"summary-04-44-05-06","link":"#summary-04-44-05-06","children":[]}]},{"level":2,"title":"10.3.6 Zero Day Application Attacks","slug":"_10-3-6-zero-day-application-attacks","link":"#_10-3-6-zero-day-application-attacks","children":[{"level":3,"title":"Zero Day Application Attacks 00:00-00:17","slug":"zero-day-application-attacks-00-00-00-17","link":"#zero-day-application-attacks-00-00-00-17","children":[]},{"level":3,"title":"Attacks 00:17-00:30","slug":"attacks-00-17-00-30","link":"#attacks-00-17-00-30","children":[]},{"level":3,"title":"Unknown Vulnerability Management Process 00:30-01:03","slug":"unknown-vulnerability-management-process-00-30-01-03","link":"#unknown-vulnerability-management-process-00-30-01-03","children":[]},{"level":3,"title":"Phases 01:03-01:46","slug":"phases-01-03-01-46","link":"#phases-01-03-01-46","children":[]},{"level":3,"title":"Defending Against Zero-day Attacks 01:46-02:24","slug":"defending-against-zero-day-attacks-01-46-02-24","link":"#defending-against-zero-day-attacks-01-46-02-24","children":[]},{"level":3,"title":"Use an IDS/IPS 02:24-02:59","slug":"use-an-ids-ips-02-24-02-59","link":"#use-an-ids-ips-02-24-02-59","children":[]},{"level":3,"title":"Summary 02:59-03:19","slug":"summary-02-59-03-19","link":"#summary-02-59-03-19","children":[]}]},{"level":2,"title":"10.3.7 Client-Side Attacks","slug":"_10-3-7-client-side-attacks","link":"#_10-3-7-client-side-attacks","children":[{"level":3,"title":"Client-Side Attacks 00:00-00:07","slug":"client-side-attacks-00-00-00-07","link":"#client-side-attacks-00-00-00-07","children":[]},{"level":3,"title":"Server-Side Attacks 00:42-01:23","slug":"server-side-attacks-00-42-01-23","link":"#server-side-attacks-00-42-01-23","children":[]},{"level":3,"title":"Client-Side Attack 01:23-01:59","slug":"client-side-attack-01-23-01-59","link":"#client-side-attack-01-23-01-59","children":[]},{"level":3,"title":"Driver Manipulation 01:59-02:37","slug":"driver-manipulation-01-59-02-37","link":"#driver-manipulation-01-59-02-37","children":[]},{"level":3,"title":"Driver Manipulation 02:37-02:56","slug":"driver-manipulation-02-37-02-56","link":"#driver-manipulation-02-37-02-56","children":[]},{"level":3,"title":"Client-Side Attack Mitigation 02:56-03:10","slug":"client-side-attack-mitigation-02-56-03-10","link":"#client-side-attack-mitigation-02-56-03-10","children":[]},{"level":3,"title":"Summary 03:10-03:27","slug":"summary-03-10-03-27","link":"#summary-03-10-03-27","children":[]}]},{"level":2,"title":"10.3.8 Web Browser Threats","slug":"_10-3-8-web-browser-threats","link":"#_10-3-8-web-browser-threats","children":[{"level":3,"title":"Web Browser Threats 00:00-00:18","slug":"web-browser-threats-00-00-00-18","link":"#web-browser-threats-00-00-00-18","children":[]},{"level":3,"title":"Security Settings 00:18-01:04","slug":"security-settings-00-18-01-04","link":"#security-settings-00-18-01-04","children":[]},{"level":3,"title":"XSS 01:04-01:30","slug":"xss-01-04-01-30","link":"#xss-01-04-01-30","children":[]},{"level":3,"title":"Plugins 01:30-02:12","slug":"plugins-01-30-02-12","link":"#plugins-01-30-02-12","children":[]},{"level":3,"title":"Injection Flaws 02:12-02:50","slug":"injection-flaws-02-12-02-50","link":"#injection-flaws-02-12-02-50","children":[]},{"level":3,"title":"Password Vaults 02:50-03:59","slug":"password-vaults-02-50-03-59","link":"#password-vaults-02-50-03-59","children":[]},{"level":3,"title":"Outdated Browsers 03:59-04:35","slug":"outdated-browsers-03-59-04-35","link":"#outdated-browsers-03-59-04-35","children":[]},{"level":3,"title":"Cookies 04:35-05:01","slug":"cookies-04-35-05-01","link":"#cookies-04-35-05-01","children":[]},{"level":3,"title":"Mitigate the Risk 05:01-07:41","slug":"mitigate-the-risk-05-01-07-41","link":"#mitigate-the-risk-05-01-07-41","children":[]},{"level":3,"title":"Summary 07:41-08:02","slug":"summary-07-41-08-02","link":"#summary-07-41-08-02","children":[]}]},{"level":2,"title":"10.3.9 Web Browser Security Facts","slug":"_10-3-9-web-browser-security-facts","link":"#_10-3-9-web-browser-security-facts","children":[{"level":3,"title":"Manage Browser Data","slug":"manage-browser-data","link":"#manage-browser-data","children":[]},{"level":3,"title":"Enhancing Browser Privacy","slug":"enhancing-browser-privacy","link":"#enhancing-browser-privacy","children":[]}]},{"level":2,"title":"10.3.11 Preventing Cross-Site Scripting","slug":"_10-3-11-preventing-cross-site-scripting","link":"#_10-3-11-preventing-cross-site-scripting","children":[{"level":3,"title":"Preventing Cross-Site Scripting 00:00-00:35","slug":"preventing-cross-site-scripting-00-00-00-35","link":"#preventing-cross-site-scripting-00-00-00-35","children":[]},{"level":3,"title":"Disable JavaScript in Internet Explorer 00:35-01:44","slug":"disable-javascript-in-internet-explorer-00-35-01-44","link":"#disable-javascript-in-internet-explorer-00-35-01-44","children":[]},{"level":3,"title":"Disable JavaScript in Chrome 01:44-02:16","slug":"disable-javascript-in-chrome-01-44-02-16","link":"#disable-javascript-in-chrome-01-44-02-16","children":[]},{"level":3,"title":"Disable JavaScript in Firefox 02:16-04:24","slug":"disable-javascript-in-firefox-02-16-04-24","link":"#disable-javascript-in-firefox-02-16-04-24","children":[]},{"level":3,"title":"Summary 04:24-04:49","slug":"summary-04-24-04-49","link":"#summary-04-24-04-49","children":[]}]},{"level":2,"title":"10.3.12 SQL Injections","slug":"_10-3-12-sql-injections","link":"#_10-3-12-sql-injections","children":[{"level":3,"title":"SQL Injection 00:00-00:52","slug":"sql-injection-00-00-00-52","link":"#sql-injection-00-00-00-52","children":[]},{"level":3,"title":"How Web Applications Work 00:52-01:22","slug":"how-web-applications-work-00-52-01-22","link":"#how-web-applications-work-00-52-01-22","children":[]},{"level":3,"title":"Databases 01:22-02:48","slug":"databases-01-22-02-48","link":"#databases-01-22-02-48","children":[]},{"level":3,"title":"How an SQL Injection Works 02:48-05:42","slug":"how-an-sql-injection-works-02-48-05-42","link":"#how-an-sql-injection-works-02-48-05-42","children":[]},{"level":3,"title":"Summary 05:42-05:54","slug":"summary-05-42-05-54","link":"#summary-05-42-05-54","children":[]}]},{"level":2,"title":"10.3.13 Exploit SQL on a Web Page","slug":"_10-3-13-exploit-sql-on-a-web-page","link":"#_10-3-13-exploit-sql-on-a-web-page","children":[{"level":3,"title":"Exploit SQL on a Web Page 00:00-01:02","slug":"exploit-sql-on-a-web-page-00-00-01-02","link":"#exploit-sql-on-a-web-page-00-00-01-02","children":[]},{"level":3,"title":"Our Setup 01:02-01:27","slug":"our-setup-01-02-01-27","link":"#our-setup-01-02-01-27","children":[]},{"level":3,"title":"Find the Database Name and Username 02:15-02:40","slug":"find-the-database-name-and-username-02-15-02-40","link":"#find-the-database-name-and-username-02-15-02-40","children":[]},{"level":3,"title":"Find a List of Tables 02:40-03:15","slug":"find-a-list-of-tables-02-40-03-15","link":"#find-a-list-of-tables-02-40-03-15","children":[]},{"level":3,"title":"Find Usernames and Passwords from a Table 03:15-03:35","slug":"find-usernames-and-passwords-from-a-table-03-15-03-35","link":"#find-usernames-and-passwords-from-a-table-03-15-03-35","children":[]},{"level":3,"title":"Summary 03:35-03:58","slug":"summary-03-35-03-58","link":"#summary-03-35-03-58","children":[]}]},{"level":2,"title":"10.3.14 Web Application Attack Facts","slug":"_10-3-14-web-application-attack-facts","link":"#_10-3-14-web-application-attack-facts","children":[{"level":3,"title":"Privilege Escalation","slug":"privilege-escalation","link":"#privilege-escalation","children":[]},{"level":3,"title":"Pointer/Object Dereference","slug":"pointer-object-dereference","link":"#pointer-object-dereference","children":[]},{"level":3,"title":"Buffer Overflows","slug":"buffer-overflows","link":"#buffer-overflows","children":[]},{"level":3,"title":"Resource Exhaustion","slug":"resource-exhaustion","link":"#resource-exhaustion","children":[]},{"level":3,"title":"Memory Leak","slug":"memory-leak","link":"#memory-leak","children":[]},{"level":3,"title":"Race Conditions","slug":"race-conditions","link":"#race-conditions","children":[]},{"level":3,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[]},{"level":3,"title":"Improper Input Handling","slug":"improper-input-handling","link":"#improper-input-handling","children":[]},{"level":3,"title":"Replay Attack","slug":"replay-attack","link":"#replay-attack","children":[]},{"level":3,"title":"Pass the Hash","slug":"pass-the-hash","link":"#pass-the-hash","children":[]},{"level":3,"title":"Application Programming Interface (API) Attacks","slug":"application-programming-interface-api-attacks","link":"#application-programming-interface-api-attacks","children":[]},{"level":3,"title":"Secure Sockets Layer (SSL) Stripping","slug":"secure-sockets-layer-ssl-stripping","link":"#secure-sockets-layer-ssl-stripping","children":[]},{"level":3,"title":"Driver Manipulation","slug":"driver-manipulation","link":"#driver-manipulation","children":[]}]}],"git":{"updatedTime":1736226844000},"filePathRelative":"10/10.03.WebApplicationAttacks.md"}');export{d as comp,p as data};
