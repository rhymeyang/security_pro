import{_ as n,c as s,a as e,d as t,b as i,o as r}from"./app-CfbBmV1V.js";const o={};function l(h,a){return r(),s("div",null,a[0]||(a[0]=[e("p",null,"As you study this section, answer the following questions:",-1),e("ul",null,[e("li",null," How can cryptography support the goals of information security? "),e("li",null," Why is reusing encryption keys considered a weakness? "),e("li",null," What is a digital signature? What benefits does it provide? "),e("li",null," What are the three main hashing algorithms in use today? "),e("li",null," What functionality does a Trusted Platform Module (TPM) chip provide? ")],-1),e("p",null,"The key terms for this section include:",-1),e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Term "),e("th",{scope:"col",class:"fw-bold"}," Definition ")])]),e("tbody",null,[e("tr",null,[e("td",null," Hybrid cryptosystem "),e("td",null," A hybrid cryptosystem combines the efficiency of symmetric encryption with the convenience of asymmetric encryption. ")]),e("tr",null,[e("td",null," Digital signature "),e("td",null," A digital signature is a combination of asymmetric encryption and hashing values. A signature provides confidentiality, integrity validation, strong authentication, and non-repudiation. ")]),e("tr",null,[e("td",null," Hashing "),e("td",null," The process of using an algorithm to convert data to a fixed-length key called a hash. ")]),e("tr",null,[e("td",null," Trusted Platform Module "),e("td",null," TPM is a hardware chip on the motherboard that can generate and store cryptographic keys. ")]),e("tr",null,[e("td",null,[t(" Hardware security module "),e("br"),t(" (HSM) ")]),e("td",null," A hardware security module (HSM) is a piece of hardware and associated software/firmware that is connected to a computer system to provide cryptographic functions. ")])])],-1),e("p",null,"This section helps you prepare for the following certification exam objectives:",-1),e("table",{class:"objectives"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Exam "),e("th",{scope:"col",class:"fw-bold"}," Objective ")])]),e("tbody",null,[e("tr",null,[e("td",null," TestOut Security Pro "),e("td",null,[t(" 4.0 Data Security "),e("blockquote",null," 4.2 Implement Encryption Technologies ")])]),e("tr",null,[e("td",null," CompTIA Security+ SY0-601 "),e("td",null,[t(" 2.1 Explain the importance of security concepts in an enterprise environment. "),e("ul",null,[e("li",null,[t(" Data protection "),e("ul",null,[e("li",null," Encryption ")])]),e("li",null," Hardware security module (HSM) "),e("li",null," Hashing ")]),e("p",null," 2.8 Summarize the basics of cryptographic concepts. "),e("ul",null,[e("li",null," Digital signatures "),e("li",null," Steganography "),e("li",null,[t(" Common use cases "),e("ul",null,[e("li",null," Supporting confidentiality "),e("li",null," Supporting integrity "),e("li",null," Supporting obfuscation "),e("li",null," Supporting authentication "),e("li",null," Supporting non-repudiation "),e("li",null," Resource vs. security ")])]),e("li",null,[t(" Limitations "),e("ul",null,[e("li",null," Speed "),e("li",null," Size "),e("li",null," Weak keys "),e("li",null," Time "),e("li",null," Longevity "),e("li",null," Predictability "),e("li",null," Reuse "),e("li",null," Entropy "),e("li",null," Computational overheads "),e("li",null," Resource vs. security constraints ")])])]),e("p",null," 3.2 Given a scenario, implement host or application security solutions. "),e("ul",null,[e("li",null," Trusted Platform Module (TPM) ")]),e("p",null," 3.3 Given a scenario, implement secure network designs. "),e("ul",null,[e("li",null," HSM ")]),e("p",null," 4.5 Explain the key aspects of digital forensics. "),e("ul",null,[e("li",null,[t(" Integrity "),e("ul",null,[e("li",null," Hashing ")])])])])])])],-1),i('<h2 id="_7-2-1-cryptography-uses-and-limitations" tabindex="-1"><a class="header-anchor" href="#_7-2-1-cryptography-uses-and-limitations"><span>7.2.1 Cryptography Uses and Limitations</span></a></h2><h3 id="cryptography-uses-and-limitations-00-00-00-15" tabindex="-1"><a class="header-anchor" href="#cryptography-uses-and-limitations-00-00-00-15"><span>Cryptography Uses and Limitations 00:00-00:15</span></a></h3><p>When implemented properly, cryptography is a powerful tool for securing data. In this video, we&#39;re going to look at some common uses of cryptography and some its limitations.</p><h3 id="cryptography-uses-00-15-00-30" tabindex="-1"><a class="header-anchor" href="#cryptography-uses-00-15-00-30"><span>Cryptography Uses 00:15-00:30</span></a></h3><p>The five main elements of information security are confidentiality, integrity, availability, authenticity, and non-repudiation. Implementing cryptography methods can help achieve each of these elements except for availability.</p><h3 id="confidentiality-00-30-00-40" tabindex="-1"><a class="header-anchor" href="#confidentiality-00-30-00-40"><span>Confidentiality 00:30-00:40</span></a></h3><p>Confidentiality is achieved by encrypting or obfuscating data. Obfuscation is different from encryption, but it&#39;s still a form of cryptography.</p><h3 id="encryption-and-obfuscation-00-40-01-08" tabindex="-1"><a class="header-anchor" href="#encryption-and-obfuscation-00-40-01-08"><span>Encryption and Obfuscation 00:40-01:08</span></a></h3><p>Encryption is the process of transforming the readable data into something unreadable, the ciphertext. Obfuscation simply makes something harder to understand without changing the data itself. We see this a lot with JavaScript.</p><p>The JavaScript can be obfuscated, making it very difficult to understand if someone was reading the code, but the computer is still able to read it and process it. Because of this, obfuscation is more of an obstacle then a barrier, like encryption.</p><h3 id="integrity-and-authentication-01-08-01-24" tabindex="-1"><a class="header-anchor" href="#integrity-and-authentication-01-08-01-24"><span>Integrity and Authentication 01:08-01:24</span></a></h3><p>Hashing and digital signatures can ensure data integrity and authenticity. Creating a hash of the file validates that the file is authentic and has not been changed. Applying a digital signature proves that the file is authentic and comes from the correct person.</p><h3 id="non-repudiation-01-24-02-00" tabindex="-1"><a class="header-anchor" href="#non-repudiation-01-24-02-00"><span>Non-Repudiation 01:24-02:00</span></a></h3><p>A digital signature also provides non-repudiation, meaning that it&#39;s hard to deny. For example, when you sign your name to an official document, such as a contract, you can&#39;t turn around later and say you didn&#39;t know anything about it. Digital signatures provide the same function. When a file is digitally signed, it&#39;s like putting a lock on the document and, as such, can&#39;t be denied. This is because a digital signature is associated with an individual&#39;s private key, identifying them as the one who signed the document. Likewise, if the document changes after the signature is applied, then then signature becomes invalid.</p><h3 id="cryptography-limitations-02-00-02-09" tabindex="-1"><a class="header-anchor" href="#cryptography-limitations-02-00-02-09"><span>Cryptography Limitations 02:00-02:09</span></a></h3><p>Cryptography has a lot of great uses and can be extremely powerful when used properly, but there are definitely some limitations.</p><h3 id="encrypted-and-decrypted-speed-02-09-02-28" tabindex="-1"><a class="header-anchor" href="#encrypted-and-decrypted-speed-02-09-02-28"><span>Encrypted and Decrypted Speed 02:09-02:28</span></a></h3><p>One of the biggest limitations is the speed of encryption and decryption, especially when you&#39;re working with large files. BitLocker encryption takes roughly 1 minute for every 500 megabytes encrypted. So, if you&#39;re encrypting a 2-terabyte drive, you need approximately 67 hours for that process to complete.</p><h3 id="resources-02-28-02-45" tabindex="-1"><a class="header-anchor" href="#resources-02-28-02-45"><span>Resources 02:28-02:45</span></a></h3><p>Encryption also requires a lot of processing power. All these algorithms and mathematical computations being done can really wear down a processor, which will slow down the computer. Depending on the encryption being performed, you&#39;re going to need a powerful computer.</p><h3 id="key-weaknesses-02-45-03-26" tabindex="-1"><a class="header-anchor" href="#key-weaknesses-02-45-03-26"><span>Key Weaknesses 02:45-03:26</span></a></h3><p>The keys being used can be a weak spot in the encryption process as well. Reusing a key is one of the biggest issues for users. For the best security, a key should only be used once and should be at least 256 bits. Anything less makes it easier to brute force. Using a predictable key will make it susceptible to a dictionary attack. If the number generated isn&#39;t random enough, the key can be cracked by a skilled hacker. The lack of randomness is called entropy. Computer scientists are constantly in a battle against hackers. The longer an encryption standard is used, the more likely that hackers will figure out the cipher and find weaknesses.</p><h3 id="availability-03-26-03-53" tabindex="-1"><a class="header-anchor" href="#availability-03-26-03-53"><span>Availability 03:26-03:53</span></a></h3><p>Data availability is one of the goals of information security. Since encryption can hinder the availability of the data, it&#39;s important for the system administrators to measure the level of security against the availability of a resource.</p><p>For example, a company directory needs to be accessed frequently and probably doesn&#39;t need to be encrypted, but a spreadsheet containing employee personal information is rarely accessed and should be encrypted.</p><h3 id="summary-03-53-04-16" tabindex="-1"><a class="header-anchor" href="#summary-03-53-04-16"><span>Summary 03:53-04:16</span></a></h3><p>That&#39;s it for this lesson. In this lesson, we discussed the different uses of cryptography and how it can support the confidentiality, integrity, authenticity, and non-repudiation goals of information security. Then we looked at the limitations of cryptography and discussed resource availability compared to security concerns.</p><h2 id="_7-2-2-cryptography-uses-and-limitations-facts" tabindex="-1"><a class="header-anchor" href="#_7-2-2-cryptography-uses-and-limitations-facts"><span>7.2.2 Cryptography Uses and Limitations Facts</span></a></h2><p>When properly implemented, cryptography methods can be used to support the goals of information security. This is true in all cases except availability. Encryption and decryption can slow the availability of data.</p><p>This lesson covers the following topics:</p><ul><li>Uses of cryptography</li><li>Limits of cryptography</li></ul><h3 id="uses-of-cryptography" tabindex="-1"><a class="header-anchor" href="#uses-of-cryptography"><span>Uses of Cryptography</span></a></h3><p>The following table shows how cryptography can be used to support the goals of Information Security.</p>',33),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Information Security Goal "),e("th",{scope:"col",class:"fw-bold"}," Cryptography support ")])]),e("tbody",null,[e("tr",null,[e("td",null," Confidentiality "),e("td",null,[t(" Encrypting data or obfuscating data provides data confidentiality. Obfuscation is different than encryption, but is a form of cryptography. "),e("ul",null,[e("li",null," Encryption is the process of transforming readable data into something unreadable. This is called ciphertext. "),e("li",null," Obfuscation is the process of making something more difficult to understand without changing the data itself. ")])])]),e("tr",null,[e("td",null," Integrity "),e("td",null," Creating a hash of a file can be used to validate that the file has not been altered. This validates the integrity of the file. ")]),e("tr",null,[e("td",null," Authenticity "),e("td",null," Applying a digital signature proves that the file is authentic and comes from the correct person. ")]),e("tr",null,[e("td",null," Non-repudiation "),e("td",null," Applying a digital signature provides non-repudiation. This means that the sender cannot later deny having sent the file. ")])])],-1),e("h3",{id:"limits-of-cryptography",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#limits-of-cryptography"},[e("span",null,"Limits of Cryptography")])],-1),e("p",null,"Implementing cryptography does come with some limitations. The following table covers some of these limitations.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Limitation "),e("th",{scope:"col",class:"fw-bold"}," Description ")])]),e("tbody",null,[e("tr",null,[e("td",null," Speed "),e("td",null," Speed is one of the biggest limitations of encryption. The encryption process can take a long time, especially with the large file sizes in use today. For example, BitLocker encrypts 500 megabytes in approximately 1 minute. A 2TB drive would take approximately 67 hours to encrypt. ")]),e("tr",null,[e("td",null," Resources "),e("td",null," Encryption is done through advanced algorithms and mathematical operations. This requires a large amount of CPU power and resources. ")]),e("tr",null,[e("td",null," Weakness in keys "),e("td",null,[t(" Encryption keys can be a weakness depending on how they are utilized. "),e("ul",null,[e("li",null," Reuse - Reusing keys is a major concern. The more a key is reused, the more likely it is that it will be cracked. For best security, a key should be used only one time. "),e("li",null," Key Length - Encryption keys should be no less than 256 bits. For better security, using an algorithm such as AES that also uses a 128-bit block size is ideal. "),e("li",null," Predictability - A predictable key is susceptible to a dictionary attack. Strong keys are completely random. If the number generator used is not random enough, the keys are weaker. This lack of randomness is called entropy. "),e("li",null," Longevity - The longer an encryption standard is used, the more likely it is that it will be cracked. Computer scientists are constantly working on newer, more secure methods of encryption. ")])])]),e("tr",null,[e("td",null," Availability "),e("td",null," Availability of data is one of the goals of Information Security. Since encryption can hinder the availability of data, it is important to measure the level of security against the availability of a resource. The more secure data is made, the more difficult (less available) it becomes for a user to access. ")])])],-1),i('<h2 id="_7-2-3-combining-cryptographic-methods" tabindex="-1"><a class="header-anchor" href="#_7-2-3-combining-cryptographic-methods"><span>7.2.3 Combining Cryptographic Methods</span></a></h2><h3 id="combining-cryptographic-methods-00-00-00-20" tabindex="-1"><a class="header-anchor" href="#combining-cryptographic-methods-00-00-00-20"><span>Combining Cryptographic Methods 00:00-00:20</span></a></h3><p>Using cryptography lets you secure your data against unauthorized users, but in some cases, it&#39;s beneficial if you combine different cryptographic methods to increase data security.</p><p>In this video, we&#39;ll look at hybrid models, digital signatures, and combining encryption with steganography.</p><h3 id="hybrid-models-00-20-00-49" tabindex="-1"><a class="header-anchor" href="#hybrid-models-00-20-00-49"><span>Hybrid Models 00:20-00:49</span></a></h3><p>Hybrid cryptographic models combine the use of symmetric and asymmetric keys to encrypt data.</p><p>Asymmetric encryption methods provide an easier way to exchange keys safely, but are not very efficient because they rely on some complicated mathematical computations. Symmetric encryptions are efficient, but because it can be a pain to get the keys out, they&#39;re not very convenient. A hybrid cryptosystem combines the convenience of asymmetric methods and the efficiency of symmetric methods.</p><h3 id="encrypting-file-system-efs-00-49-01-40" tabindex="-1"><a class="header-anchor" href="#encrypting-file-system-efs-00-49-01-40"><span>Encrypting File System (EFS) 00:49-01:40</span></a></h3><p>One example of this combination is the Microsoft Encrypting File System, or EFS. EFS was introduced in version 3.0 of NTFS. It has been included in every version of Windows except Home edition since Windows 2000.</p><p>EFS works by encrypting a file with a special symmetric key called the File Encryption Key, or FEK. The user&#39;s public asymmetric key is then used to encrypt the FEK.</p><p>During decryption, the user&#39;s private key is used to decrypt the FEK, which is then used to decrypt the file.</p><p>By combining the security of the symmetric keys and the convenience of the asymmetric keys, Microsoft has made it easy for users to encrypt their data. The main drawback of EFS is that the user&#39;s private key is essentially their password. This means that the encryption is only as strong as the user&#39;s password.</p><h3 id="digital-signatures-01-40-02-54" tabindex="-1"><a class="header-anchor" href="#digital-signatures-01-40-02-54"><span>Digital Signatures 01:40-02:54</span></a></h3><p>One very common practice that combines cryptographic methods</p><p>is the digital signature. A digital signature combines the hash of a file and a user&#39;s private key to electronically sign a document, providing an authentic and non-repudiation file.</p><p>For example, if we had a large file that needed to be digitally signed, we could use asymmetric encryption to simply encrypt it. However, that process is slow and could generate a very large file size. Instead, we can create a hash of the file.</p><p>The three main hashing algorithms used today are SHA-1, which generates a 160-bit key, MD5, which generates a 128-bit key, and SHA-2, which is also commonly referred to as SHA-256. It creates a 256-bit key.</p><p>Whichever algorithm is used, the hash generates a fingerprint of the file. Now, instead of encrypting the file itself, we can encrypt the hash that was generated using our private key. We combine that encrypted hash with the file to digitally sign it.</p><p>Now, when we send the message to the recipient, she&#39;ll first generate a hash of the file. She&#39;ll then use our public key to decrypt the hash that we generated and compare it with theirs. If the hashes match, then they can be assured that the message is legitimate and hasn&#39;t been altered.</p><h3 id="digital-envelopes-02-54-03-27" tabindex="-1"><a class="header-anchor" href="#digital-envelopes-02-54-03-27"><span>Digital Envelopes 02:54-03:27</span></a></h3><p>We can take this one step further and encrypt the file itself along with the digital signature using a digital envelope.</p><p>To do this, we would use the recipient&#39;s public key to encrypt the data. The ciphertext, hash, and digital signature are all combined and sent together. The recipient uses our public key to decrypt the hash to authenticate the message. Then they use their private key to decrypt the ciphertext.</p><p>By combining the digital signature with asymmetric encryption, we get authentication, confidentiality, integrity, and non-repudiation.</p><h3 id="encryption-with-steganography-03-27-04-09" tabindex="-1"><a class="header-anchor" href="#encryption-with-steganography-03-27-04-09"><span>Encryption with Steganography 03:27-04:09</span></a></h3><p>An interesting combination of cryptographic methods is using asymmetric encryption with steganography. There&#39;s been a fairly large amount of recent research on ways to combine these methods effectively.</p><p>Let&#39;s look at how this would work.</p><p>We start by encrypting our plaintext with our private key, generating our ciphertext. Next, we hide the ciphertext inside of a media file, such as an image.</p><p>When our recipient receives the file, she&#39;ll first extract the ciphertext and then use the public key to decrypt the ciphertext.</p><p>By combining these two methods, we increase the security of a message. Anyone intercepting the message would need to know that there&#39;s an encrypted file inside the image file before attempting to crack the encryption.</p><h3 id="summary-04-09-04-44" tabindex="-1"><a class="header-anchor" href="#summary-04-09-04-44"><span>Summary 04:09-04:44</span></a></h3><p>And that&#39;s it for this lesson. In this video, we discussed the different ways of combining cryptographic methods. We looked at how hybrid cryptographic models combine the efficiency of symmetric methods and the convenience of asymmetric methods and how EFS takes advantage of this combination. Then we discussed digital signatures and how they can be used to provide message authentication and non-repudiation. Finally, we went over combining encryption with steganography and how this combination can be used to hide ciphertext inside of a media file.</p><h2 id="_7-2-4-hardware-based-encryption-devices" tabindex="-1"><a class="header-anchor" href="#_7-2-4-hardware-based-encryption-devices"><span>7.2.4 Hardware-Based Encryption Devices</span></a></h2><h3 id="hardware-based-encryption-00-00-00-16" tabindex="-1"><a class="header-anchor" href="#hardware-based-encryption-00-00-00-16"><span>Hardware-Based Encryption 00:00-00:16</span></a></h3><p>Many encryption systems are managed by the operating system or other software, but there are also some hardware options for encryption. In this lesson, we&#39;ll look at the two of the most common hardware options, the TPM and HSM.</p><h3 id="tpm-00-16-01-53" tabindex="-1"><a class="header-anchor" href="#tpm-00-16-01-53"><span>TPM 00:16-01:53</span></a></h3><p>The Trusted Platform Module, or TPM, is a physical chip that resides on the motherboard. It&#39;s responsible for providing some cryptographic services. Using a hardware chip means that the encryption system itself can&#39;t be attacked by malicious software. The latest version, TPM 2.0, was released in 2014. TPM chips can be used for checking key system components at startup and for protecting and generating encryption keys and passwords.</p><p>One key function of the TPM chip is to check key system components during startup. When the system is turned on, the TPM checks to make sure everything seems normal. If the TPM detects anything out of sorts, it doesn&#39;t allow the system to boot, which prevents data from being extracted.</p><p>The TPM is also used to store and generate encryption keys. In essence, TPM provides an encrypted lockbox where user passwords, encryption keys, and digital certificates can be kept safe.</p><p>For example, Windows 10 can pull these keys directly from the TPM without loading them into the RAM, where they would be more vulnerable to attack.</p><p>When encryption keys are generated, they usually need a random number to be generated too. This is a weak spot in encryption since most software number generators contain patterns and are not truly random.</p><p>The TPM chip can be used to generate completely random numbers for the encryption process, which increases the effectiveness of the encryption keys.</p><p>A TPM chip can also greatly increase the security of a system. Some popular Windows features such as BitLocker and Credential Guard rely on the TPM chip to perform at their most secure level.</p><h3 id="hardware-security-module-hsm-01-53-02-52" tabindex="-1"><a class="header-anchor" href="#hardware-security-module-hsm-01-53-02-52"><span>Hardware Security Module (HSM) 01:53-02:52</span></a></h3><p>A hardware security module, or HSM, is very similar to a TPM. You might also hear these devices referred to as a Personal Computer Security Module or Secure Application Module. One of key differences is that an HSM is a removable device, whereas the TPM is built into the motherboard.</p><p>One major benefit of HSMs is that they&#39;re more powerful than TPM chips. HSMs are designed to be powerful cryptographic devices with better hardware capabilities. This allows HSMs to perform multiple security operations for multiple users. Some HSM devices can even be attached to a server to handle cryptographic functions for an entire network.</p><p>HSM devices perform many of the same functions as a TPM, such as generating and storing encryption keys, but they can also be used to generate and validate digital signatures and generate keys used in smart cards. Consumer-grade HSM devices have become much more affordable over the past few years, making them more accessible than before.</p><h3 id="summary-02-52-03-16" tabindex="-1"><a class="header-anchor" href="#summary-02-52-03-16"><span>Summary 02:52-03:16</span></a></h3><p>And that&#39;s it for this lesson. In this video, we&#39;ve covered two options for hardware-based encryption. The TPM chip is built into the motherboard. It checks key hardware components during startup and generates and stores encryption keys. And HSMs are add-on devices that perform many of the same functions as a TPM chip, but are much more powerful.</p><h2 id="_7-2-5-cryptographic-implementation-facts" tabindex="-1"><a class="header-anchor" href="#_7-2-5-cryptographic-implementation-facts"><span>7.2.5 Cryptographic Implementation Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li> Hybrid models </li><li> Digital signatures </li><li> Encryption with steganography </li><li> Hardware-based encryption </li></ul><h3 id="hybrid-models" tabindex="-1"><a class="header-anchor" href="#hybrid-models"><span>Hybrid Models</span></a></h3><p>Operating systems, applications, and other components of information systems typically use a hybrid cryptography system. A hybrid cryptography system combines the strengths of hashing, symmetric encryption, and asymmetric encryption depending on the needs of the project or service. An example of these strengths are:</p><ul><li> Use symmetric encryption for fast and efficient encryption of bulk data. </li><li> Use hashing to verify message integrity. </li><li> Use asymmetric encryption for authentication and non-repudiation. </li><li> Use asymmetric encryption for secure exchange of symmetric encryption keys (for example, by encrypting the key used for symmetric encryption prior to sharing the key with the recipient). Using asymmetric cryptography for encryption is best for small pieces of data. </li></ul><p>A hybrid cryptosystem combines the efficiency of symmetric methods and the convenience of asymmetric methods. One example of this is Microsoft&#39;s Encrypting File System, or EFS. Microsoft&#39;s EFS uses the following steps to encrypt data:</p><ol><li> A file is encrypted using a File Encryption Key (FEK). </li><li> The FEK is encrypted with the user&#39;s public asymmetric key. </li><li> The file is sent to the intended recipient. </li><li> The user&#39;s private key is used to decrypt the FEK. </li><li> The FEK is used to decrypt the file. </li></ol><p>One of the biggest weaknesses of the EFS is that the user&#39;s private key is essentially their user password. If the password is weak, the encryption will also be weak.</p><h3 id="digital-signatures" tabindex="-1"><a class="header-anchor" href="#digital-signatures"><span>Digital Signatures</span></a></h3><p>One very common practice that combines cryptographic methods is the digital signature. A digital signature combines the hash of a file and a user’s private key to electronically sign a document. This provides authentication and non-repudiation of the file.</p>',59),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Signing Concept "),e("th",{scope:"col",class:"fw-bold"}," Description ")])]),e("tbody",null,[e("tr",null,[e("td",null," Digital Signature "),e("td",null,[t(" A digital signature is a combination of asymmetric encryption and hashing values. A signature provides confidentiality, integrity validation, strong authentication, and non-repudiation. "),e("br"),t(" Typically, a digital signature works as follows: "),e("ol",null,[e("li",null," A hash value is generated for a message. "),e("li",null," The hash value is asymmetrically encrypted using the sender's private key. Non-repudiation is provided because only the sender could have encrypted the hash using the private key (only the sender knows the private key). "),e("li",null," The encrypted hash value and the message are sent. "),e("li",null," The recipient decrypts the hash using the sender's public key. "),e("li",null," The recipient hashes the message. "),e("li",null," Message integrity and sender authenticity (non-repudiation) is confirmed if the two hash values match. ")])])]),e("tr",null,[e("td",null," Hashing "),e("td",null,[t(" Hashing is the process of using an algorithm, like MD5 or SHA, on data and generating a fixed-length key called a hash. The three main hashing algorithms used today are: "),e("ul",null,[e("li",null," SHA-1, which generates a 160-bit key "),e("li",null," MD5, which generates a 128-bit key "),e("li",null," SHA-2 (SHA-256), which can generates a 256-bit key ")])])]),e("tr",null,[e("td",null," Digital Envelope "),e("td",null,[t(" In addition to digital signatures, data can be protected by using secure data transmission. This protects the message from hackers by using asymmetric encryption to secure the message before sending it to the recipient. Secure data transmission uses the following process: "),e("ol",null,[e("li",null," The sender requests a copy of the recipient's public key. "),e("li",null," The recipient or CA sends a digital certificate containing the public key to the sender. "),e("li",null," The sender asymmetrically encrypts the message using the recipient's public key. "),e("li",null," The sender sends the asymmetrically encrypted message to the recipient. "),e("li",null," The recipient uses his private key to decrypt the message. ")])])])])],-1),i('<h3 id="encryption-with-steganography" tabindex="-1"><a class="header-anchor" href="#encryption-with-steganography"><span>Encryption with Steganography</span></a></h3><p>There has been an increased amount of research done on how to best combine encryption with steganography. The process essentially follows the steps below:</p><ol><li> Encrypt plaintext with a private key to generate ciphertext. </li><li> The ciphertext is hidden inside of a media file, such as an image, using steganography. </li><li> The recipient extracts the ciphertext and decrypts it using the matching public key. </li><li> Because the ciphertext is hidden in the image file, someone intercepting the message would have to know its there before being able to decrypt it. </li></ol><h3 id="hardware-based-encryption" tabindex="-1"><a class="header-anchor" href="#hardware-based-encryption"><span>Hardware-Based Encryption</span></a></h3><p>Hardware devices can be combined with software-based encryption to offer powerful cryptography options. The following table shows the two most common hardware cryptography devices - TPM and HSM.</p>',5),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Hardware Cryptography Device "),e("th",{scope:"col",class:"fw-bold"}," Description ")])]),e("tbody",null,[e("tr",null,[e("td",null,[t(" Trusted Platform Module "),e("br"),t(" (TPM) ")]),e("td",null,[t(" Trusted Platform Module (TPM) is a hardware chip on the motherboard that can generate and store cryptographic keys. TPM version 2.0 was released in 2014. Beginning with Windows 10 version 1607, Microsoft required that TPM 2.0 be enabled by default on all new computers. "),e("ul",null,[e("li",null,[t(" A TPM is required to check the integrity of startup files and components in BitLocker implementations. "),e("ul",null,[e("li",null," The TPM generates a hash of the startup files to verify the integrity of those files. "),e("li",null," Additionally, the TPM creates a hash of system components. This hash acts as a validation check of the system to ensure that system components have not changed. The hash can also be used to uniquely identify the system. ")])]),e("li",null,[t(" Windows Credential Guard requires the computer to have a TPM chip installed. "),e("ul",null,[e("li",null," A TPM provides protection for virtual-based security encryption keys that are stored in the firmware. This helps protect against attacks involving a physically present user with BIOS access. ")])]),e("li",null," A TPM can generate truly random numbers, thus preventing entropy. "),e("li",null," TPM provides full support for asymmetric encryption; therefore, it can generate public and private keys. "),e("li",null," A TPM also provides encrypted storage for user passwords, encryption keys, and digital certificates. "),e("li",null," Windows 10 can pull stored keys directly from the TPM without loading them into the RAM where they would be more vulnerable to an attack. ")])])]),e("tr",null,[e("td",null," Hardware Security Module (HSM) "),e("td",null,[t(" A Hardware Security Module (HSM) is a piece of hardware and associated software/firmware that is connected to a computer system to provide cryptographic functions such as: "),e("ul",null,[e("li",null," Generate and store encryption keys "),e("li",null," Generate and validate digital signatures "),e("li",null," Generate keys used in smart cards ")]),t(" HSMs traditionally come in the form of a plug-in card or an external security device that can be attached directly to the computer system. These devices offer some benefits over TPM chips. "),e("ul",null,[e("li",null," HSMs are more powerful and can perform more powerful cryptographic functions quicker. "),e("li",null," HSMs can perform multiple cryptographic functions simultaneously. "),e("li",null," HSMs can be attached to a network and handle cryptographic functions for multiple users across the network. ")]),t(" Hardware Security Modules are also known as: "),e("ul",null,[e("li",null," Personal Computer Security Module (PCSM) "),e("li",null," Secure Application Module (SAM) "),e("li",null," Hardware cryptographic devices "),e("li",null," Cryptographic modules ")])])])])],-1)]))}const d=n(o,[["render",l],["__file","07.02.CryptographyImplementations.html.vue"]]),p=JSON.parse('{"path":"/07/07.02.CryptographyImplementations.html","title":"Section 7.2 Cryptography Implementations","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 7.2 Cryptography Implementations","description":"some description"},"headers":[{"level":2,"title":"7.2.1 Cryptography Uses and Limitations","slug":"_7-2-1-cryptography-uses-and-limitations","link":"#_7-2-1-cryptography-uses-and-limitations","children":[{"level":3,"title":"Cryptography Uses and Limitations 00:00-00:15","slug":"cryptography-uses-and-limitations-00-00-00-15","link":"#cryptography-uses-and-limitations-00-00-00-15","children":[]},{"level":3,"title":"Cryptography Uses 00:15-00:30","slug":"cryptography-uses-00-15-00-30","link":"#cryptography-uses-00-15-00-30","children":[]},{"level":3,"title":"Confidentiality 00:30-00:40","slug":"confidentiality-00-30-00-40","link":"#confidentiality-00-30-00-40","children":[]},{"level":3,"title":"Encryption and Obfuscation 00:40-01:08","slug":"encryption-and-obfuscation-00-40-01-08","link":"#encryption-and-obfuscation-00-40-01-08","children":[]},{"level":3,"title":"Integrity and Authentication 01:08-01:24","slug":"integrity-and-authentication-01-08-01-24","link":"#integrity-and-authentication-01-08-01-24","children":[]},{"level":3,"title":"Non-Repudiation 01:24-02:00","slug":"non-repudiation-01-24-02-00","link":"#non-repudiation-01-24-02-00","children":[]},{"level":3,"title":"Cryptography Limitations 02:00-02:09","slug":"cryptography-limitations-02-00-02-09","link":"#cryptography-limitations-02-00-02-09","children":[]},{"level":3,"title":"Encrypted and Decrypted Speed 02:09-02:28","slug":"encrypted-and-decrypted-speed-02-09-02-28","link":"#encrypted-and-decrypted-speed-02-09-02-28","children":[]},{"level":3,"title":"Resources 02:28-02:45","slug":"resources-02-28-02-45","link":"#resources-02-28-02-45","children":[]},{"level":3,"title":"Key Weaknesses 02:45-03:26","slug":"key-weaknesses-02-45-03-26","link":"#key-weaknesses-02-45-03-26","children":[]},{"level":3,"title":"Availability 03:26-03:53","slug":"availability-03-26-03-53","link":"#availability-03-26-03-53","children":[]},{"level":3,"title":"Summary 03:53-04:16","slug":"summary-03-53-04-16","link":"#summary-03-53-04-16","children":[]}]},{"level":2,"title":"7.2.2 Cryptography Uses and Limitations Facts","slug":"_7-2-2-cryptography-uses-and-limitations-facts","link":"#_7-2-2-cryptography-uses-and-limitations-facts","children":[{"level":3,"title":"Uses of Cryptography","slug":"uses-of-cryptography","link":"#uses-of-cryptography","children":[]},{"level":3,"title":"Limits of Cryptography","slug":"limits-of-cryptography","link":"#limits-of-cryptography","children":[]}]},{"level":2,"title":"7.2.3 Combining Cryptographic Methods","slug":"_7-2-3-combining-cryptographic-methods","link":"#_7-2-3-combining-cryptographic-methods","children":[{"level":3,"title":"Combining Cryptographic Methods 00:00-00:20","slug":"combining-cryptographic-methods-00-00-00-20","link":"#combining-cryptographic-methods-00-00-00-20","children":[]},{"level":3,"title":"Hybrid Models 00:20-00:49","slug":"hybrid-models-00-20-00-49","link":"#hybrid-models-00-20-00-49","children":[]},{"level":3,"title":"Encrypting File System (EFS) 00:49-01:40","slug":"encrypting-file-system-efs-00-49-01-40","link":"#encrypting-file-system-efs-00-49-01-40","children":[]},{"level":3,"title":"Digital Signatures 01:40-02:54","slug":"digital-signatures-01-40-02-54","link":"#digital-signatures-01-40-02-54","children":[]},{"level":3,"title":"Digital Envelopes 02:54-03:27","slug":"digital-envelopes-02-54-03-27","link":"#digital-envelopes-02-54-03-27","children":[]},{"level":3,"title":"Encryption with Steganography 03:27-04:09","slug":"encryption-with-steganography-03-27-04-09","link":"#encryption-with-steganography-03-27-04-09","children":[]},{"level":3,"title":"Summary 04:09-04:44","slug":"summary-04-09-04-44","link":"#summary-04-09-04-44","children":[]}]},{"level":2,"title":"7.2.4 Hardware-Based Encryption Devices","slug":"_7-2-4-hardware-based-encryption-devices","link":"#_7-2-4-hardware-based-encryption-devices","children":[{"level":3,"title":"Hardware-Based Encryption 00:00-00:16","slug":"hardware-based-encryption-00-00-00-16","link":"#hardware-based-encryption-00-00-00-16","children":[]},{"level":3,"title":"TPM 00:16-01:53","slug":"tpm-00-16-01-53","link":"#tpm-00-16-01-53","children":[]},{"level":3,"title":"Hardware Security Module (HSM) 01:53-02:52","slug":"hardware-security-module-hsm-01-53-02-52","link":"#hardware-security-module-hsm-01-53-02-52","children":[]},{"level":3,"title":"Summary 02:52-03:16","slug":"summary-02-52-03-16","link":"#summary-02-52-03-16","children":[]}]},{"level":2,"title":"7.2.5 Cryptographic Implementation Facts","slug":"_7-2-5-cryptographic-implementation-facts","link":"#_7-2-5-cryptographic-implementation-facts","children":[{"level":3,"title":"Hybrid Models","slug":"hybrid-models","link":"#hybrid-models","children":[]},{"level":3,"title":"Digital Signatures","slug":"digital-signatures","link":"#digital-signatures","children":[]},{"level":3,"title":"Encryption with Steganography","slug":"encryption-with-steganography","link":"#encryption-with-steganography","children":[]},{"level":3,"title":"Hardware-Based Encryption","slug":"hardware-based-encryption","link":"#hardware-based-encryption","children":[]}]}],"git":{"updatedTime":1736185323000},"filePathRelative":"07/07.02.CryptographyImplementations.md"}');export{d as comp,p as data};
