import{_ as i,c as o,b as a,a as e,d as s,o as n}from"./app-B7eXnVer.js";const r={};function l(u,t){return n(),o("div",null,t[0]||(t[0]=[a("<p>As you study this section, answer the following questions:</p><ul><li> How can you view the default values in the /etc/default/useradd file? </li><li> How do you create a user in Linux? </li><li> Which command deletes a user and the user&#39;s home directory at the same time? </li><li> What is the difference between hard and soft limits? </li><li> Which command removes all restrictions for process memory usage? </li><li> Why shouldn&#39;t passwords expire too frequently? </li><li> Which directory contains configuration file templates that are copied into a new user&#39;s home directory? </li></ul><p>In this section, you will learn to:</p><ul><li> Create a user account. </li><li> Rename a user account. </li><li> Delete a user. </li><li> Change your password. </li><li> Change a user&#39;s password. </li><li> Lock and unlock user accounts. </li></ul><p>The key terms for this section include:</p>",5),e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Term "),e("th",{scope:"col",class:"fw-bold"}," Definition ")])]),e("tbody",null,[e("tr",null,[e("td",null," daemon "),e("td",null," A Linux or UNIX program that runs as a background process, rather than being under the direct control of an interactive user. ")])])],-1),e("p",null,"This section helps you prepare for the following certification exam objectives:",-1),e("table",{class:"objectives"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Exam "),e("th",{scope:"col",class:"fw-bold"}," Objective ")])]),e("tbody",null,[e("tr",null,[e("td",null," TestOut Security Pro "),e("td",null,[s(" 1.0 Identity Management and Authentication "),e("blockquote",null,[s(" 1.1 Manage Identity "),e("br"),s(" 1.2 Harden Authentication ")])])]),e("tr",null,[e("td",null," CompTIA Security+ SY0-601 "),e("td",null,[s(" 3.7 Given a scenario, implement identity and account management controls. "),e("ul",null,[e("li",null,[s(" Account types "),e("ul",null,[e("li",null," User account "),e("li",null," Shared and generic accounts/credentials "),e("li",null," Guest accounts "),e("li",null," Service accounts ")])]),e("li",null,[s(" Account policies "),e("ul",null,[e("li",null," Password complexity "),e("li",null," Password history "),e("li",null," Password reuse "),e("li",null," Time of day "),e("li",null," Network location "),e("li",null," Geofencing "),e("li",null," Geotagging "),e("li",null," Geolocation "),e("li",null," Time-based logins "),e("li",null," Access policies "),e("li",null," Account permissions "),e("li",null," Account audits ")])])])])])])],-1),a('<h2 id="_6-7-1-linux-user-and-group-overview" tabindex="-1"><a class="header-anchor" href="#_6-7-1-linux-user-and-group-overview"><span>6.7.1 Linux User and Group Overview</span></a></h2><h3 id="linux-user-and-group-overview-00-00-00-33" tabindex="-1"><a class="header-anchor" href="#linux-user-and-group-overview-00-00-00-33"><span>Linux User and Group Overview 00:00-00:33</span></a></h3><p>In this video, we&#39;re going to discuss Linux users and groups. First, when you&#39;re working with Linux, it&#39;s important to understand that it&#39;s a true multi-user operating system. Each user account has their own unique, customizable computing environment. When user accounts are stored locally, Linux stores the user, group, and password information in three separate files on the local file system in the /etc directory. We&#39;ll discuss each of these files in this lesson.</p><h3 id="password-file-00-33-04-02" tabindex="-1"><a class="header-anchor" href="#password-file-00-33-04-02"><span>Password File 00:33-04:02</span></a></h3><p>The first file is the passwd file. The password file is named passwd, and it&#39;s stored in the /etc directory. This file contains the user account information for your system; this is where your users are defined. But don&#39;t let the filename confuse you. This file doesn&#39;t contain any password information, only user account information. Passwords are stored in another file that we&#39;ll look at in a bit.</p><p>You may hear people still refer to this file as the password file because in the early days of UNIX, passwords were stored in here alongside the usernames. But, as you can imagine, this presented a huge security risk, so this file no longer contains any passwords. To avoid confusion, I&#39;ll call this the passwd file.</p><p>So, now, the passwd file is where all the user accounts are stored. Each user account on a system is represented by a single line called an account record. An account record is composed of several fields, each separated by a colon.</p><p>The first field is the username. The second is the password field. The third is the user ID field. Then there&#39;s the group ID field, the full name field, the home directory field, and finally, the shell field.</p><p>Let&#39;s look at an example of each field. The username field contains the username the user will use to log in to the system. For example, for this record, the user account is zday. Next, we have the password field. Since this is a remnant of when passwords used to be stored in this file, you&#39;ll only see an X in this field. Now passwords are stored in the shadow file, which we&#39;ll talk about in a bit. Next is the UID field. This contains the user ID that&#39;s assigned to the user account. This user account is assigned a UID number of 1001.</p><p>Then we have the group ID field, which references the group ID number of the user&#39;s default group. In Linux, a single user account can be a member of several different groups, but by default, a user is always assigned to one group, the default group. This is almost always the Users group, which has an ID of 100.</p><p>Next, we have the full name field, which just contains the user&#39;s full name. The next field specifies the user&#39;s home directory. And finally, the default shell field specifies which shell is going to run for the user by default. Most distributions set the default shell to /bin/bash.</p><p>It&#39;s important to understand that the passwd file contains two different types of users. First, there&#39;s the standard user accounts. These accounts are used to log in to the system, such as the zday account we just saw.</p><p>The second type of accounts are the system user accounts. These accounts can&#39;t be used to log in to the system. They&#39;re used by services or daemons that are running on the system. This is because Linux uses groups, users, and permissions to control privileges. For a service or daemon to be able to read from or</p><p>write to the file system, it needs to have a user account. So, if you ever open the passwd file and wonder why there are so many users that you never created, it&#39;s because the passwd file contains both standard user accounts.</p><h3 id="shadow-files-04-02-08-45" tabindex="-1"><a class="header-anchor" href="#shadow-files-04-02-08-45"><span>Shadow Files 04:02-08:45</span></a></h3><p>Now let&#39;s talk about the shadow file, which is where passwords are stored these days.</p><p>The shadow file is linked to the passwd file. Each user account defined in your passwd file has a corresponding entry in the shadow file. As with the passwd file, each user account is represented by a single line in the shadow file called a record, which is composed of several different fields separated by colons.</p><p>Here&#39;s an example of a single record in the shadow file.</p><p>First, we have the username field, which is the same username that&#39;s defined in the passwd file. This is what links the two records together. Next, we have the password field. Depending on the type of user account you&#39;re looking at, there are a few things you can see in the password field.</p><p>For example, if the record is for a standard user account, the password field will contain a string of text. This is the user&#39;s actual password in encrypted format. Theoretically, it&#39;s possible to crack this encrypted password if someone were to gain access to this file. But it&#39;s extremely difficult to do, and it would take a very, very long time.</p><p>If the record is for a system user account, the password field will contain an asterisk. Remember, system user accounts can&#39;t be used to log in to the system. The asterisk indicates that this account is disabled, which prevents it from being able to authenticate to the system.</p><p>There&#39;s one more thing you might see in the password field: a blank entry. Nothing. This means that the user account doesn&#39;t have a password and doesn&#39;t require one to log in to the system. As you can imagine, this presents a huge security hole. A user account should always have either an encrypted password or an asterisk, not a blank entry.</p><p>The next field is the last modified field. This field displays the numbers of days since January 1st, 1970 that the password was last changed. So, when you see a huge number here, just remember that it&#39;s counting all the days between January 1st, 1970, and the day the password was last changed.</p><p>Next, we have the minimum days field. This field defines the minimum number of days that need to pass before a password can change. Usually, this is set to zero, which means the password can be changed any time. But if you want to make it so users need to keep the same password for at least a week, you could put a seven in this field.</p><p>The next field is the maximum days field. This field defines the maximum number of days a password can be used. For example, if you want users to change their password after 90 days, you would enter &#39;90&#39; in this field, or you can set passwords to never expire by entering ‘99999&#39; here.</p><p>Next, we have the days warning field. This field defines when a user will be warned that their password is about to expire. This field is usually set to five or seven days.</p><p>The next field defines the number of days to wait after a password is expired to disable the account. This field is usually set to -1, which disables this functionality. But if you want to disable an account if its password isn&#39;t changed after it expires, then you can enter a number, 3 for example.</p><p>And finally, we have the expire field. This field defines the number of days since January 1st, 1970, that must pass until the account is automatically disabled. By default, this field is blank, which means this functionality is disabled. But if you want an account to be automatically disabled on a specific date, you need to figure out the number of days between it and January 1st, 1970, and then enter that number. And don&#39;t worry, there are several tools available that can do this calculation for you.</p><p>Now, because the passwd and shadow files work together, they need to stay synchronized. The main way these files become out of sync is when an administrator uses a text editor to make changes to one of the files, but forgets to make the changes to the other, such as changing a username. If the files don&#39;t match, you&#39;ve got a problem.</p><p>To avoid this, manage user accounts using the password and user management utilities that are provided by the operating system. Avoid using a text editor. If a problem does occur, there are few commands you can use to compare the passwd file and shadow file, such as pwck, and then re-synchronize the files if they don&#39;t match.</p><h3 id="group-files-08-45-10-44" tabindex="-1"><a class="header-anchor" href="#group-files-08-45-10-44"><span>Group Files 08:45-10:44</span></a></h3><p>Now, let&#39;s look at the third file, the /etc/group file. Like most operating systems,</p><p>Linux uses groups to help ease system management. For example, instead of managing the privileges of each individual user, you can manage the privileges of a single group and then assign user accounts to that group.</p><p>Now, any changes made to the group will be automatically applied to the users. If you&#39;re managing hundreds of users, groups make your job a lot easier. Groups on a Linux system are defined in the /etc/group file. And the structure of the group file is similar to the passwd and shadow files.</p><p>Each line in the group file is a single record that defines one group on your system, and each record is composed of four fields separated by colons. The first field is the group field. It specifies the group&#39;s name. In this example, the name of the group is sales. The second field is the password field, which specifies a password for the group. This field is rarely used, and in most cases it&#39;ll contain an X, which means no password is set. The third field is the group ID number, or the GID. In this case, the GID is 33. And the last field is a list of users who are members of the group. In this example, you see that zday and rnelson are both members of the sales group.</p><p>Keep in mind that some Linux distributions use an additional group file to store group passwords. This works in a similar way to the passwd and shadow files. With this model, group passwords are stored in the gshadow file. Like the group file, the gshadow file has corresponding records and fields that define each group. In the gshadow file, you&#39;ll see fields that define the group name, the password, the group admins, and the group members.</p><h3 id="summary-10-44-11-14" tabindex="-1"><a class="header-anchor" href="#summary-10-44-11-14"><span>Summary 10:44-11:14</span></a></h3><p>So that&#39;s how Linux users and groups work on a Linux system. In this lesson, we talked about user account storage. First, we looked at the /etc/passwd file, which contains user account information. Then we looked at the shadow file, which contains user passwords and password settings. And finally, we looked at the group file, where groups and group members are defined.</p><h2 id="_6-7-2-managing-linux-users" tabindex="-1"><a class="header-anchor" href="#_6-7-2-managing-linux-users"><span>6.7.2 Managing Linux Users</span></a></h2><h3 id="managing-linux-users-00-00-00-34" tabindex="-1"><a class="header-anchor" href="#managing-linux-users-00-00-00-34"><span>Managing Linux Users 00:00-00:34</span></a></h3><p>In this demonstration, we&#39;re going to talk about managing Linux user accounts. As a Linux administrator, there will be times when you have to add, remove, or modify user accounts. Let&#39;s begin by looking at the User Add utility.</p><p>As a root user, you type ‘useradd&#39; followed by any options you might want and then the username. It&#39;s important to note that if you create a user in the shell prompt with useradd, it will automatically use the default values contained and the /etc/default/user add file.</p><h3 id="create-a-user-account-00-34-02-02" tabindex="-1"><a class="header-anchor" href="#create-a-user-account-00-34-02-02"><span>Create a User Account 00:34-02:02</span></a></h3><p>Let&#39;s look at that file right now with &#39;less /etc/default/useradd&#39;. Notice that the useradd commands use the default values. First, look at the default home directory, specified as the /home directory.</p><p>That&#39;s where the user&#39;s default profile, or default directory, will be created. There&#39;s no expiration date set by default for the account. The shell is bin/bash, and the skeleton file is etc/skel.</p><p>This is useful if you have specific files or folders that you want to be in each new user&#39;s home directory. You can simply place them in the skeleton directory, and then they&#39;re automatically created in the new user&#39;s home directory. We can see here, at the bottom, that a mail spool for the user account will also be created. You can go into this file using the VI editor and change these default values if you need to.</p><p>For example, if you want the home directory to be in a different location by default, you can set that default by typing ‘useradd -D&#39; at the shell prompt. You need to also be aware that the less /etc/login.defs file is used to configure the values that can be used for the group ID and the user ID.</p><p>If we hit Enter and scroll down, we can see here that the values for the group ID and the user ID are specified, so you can see the minimum value for the user ID on this Linux version is 1000. Also, for the group ID, the minimum is set to 1000. Let&#39;s exit out of that.</p><h3 id="useradd-command-02-02-03-29" tabindex="-1"><a class="header-anchor" href="#useradd-command-02-02-03-29"><span>UserAdd Command 02:02-03:29</span></a></h3><p>Now let&#39;s talk about useradd. Like I said before, you can override the default values using command line options.</p><p>We&#39;ll take a look at the man page for useradd, ‘man useradd&#39;. This will show you all the available options for the useradd command. A few examples are -c to specify a comment for the user&#39;s full name, -g (lowercase) to add a single primary group, and -G (uppercase) to add supplementary groups separated by commas.</p><p>Let&#39;s look at an example. Suppose we want to create a user named ksanders whose full name is Kim Sanders. We want to create a home directory, and we want to specify the user&#39;s name as we create the account. Let&#39;s go ahead and type in &#39;sudo useradd&#39;.</p><p>Now we want to use the -c option to specify the user&#39;s full name. We&#39;re going to put in ‘&quot;Kim Sanders&quot;&#39; in quotes. Then we&#39;re going to use the ‘-m&#39; option to create the user&#39;s home directory and specify the username as ‘ksanders&#39;. Press Enter.</p><p>After suppling the sudo password to add the account, we can verify that was created by looking at our etc/passwd file. If we scroll down, we can see a few things here. You can see the group and user ID, 1002, 1002.We can see the full name, Kim Sanders, and we can also see the ksanders folder within the home directory.</p><h3 id="add-passwords-to-user-accounts-03-29-04-40" tabindex="-1"><a class="header-anchor" href="#add-passwords-to-user-accounts-03-29-04-40"><span>Add Passwords to User Accounts 03:29-04:40</span></a></h3><p>ksanders doesn&#39;t have a password yet. On Linux, if the user account doesn&#39;t have a password, then the password is locked. We can verify this by typing in &#39;sudo passwd -S&#39; followed by the username, &#39;ksanders&#39;.</p><p>Now we can see this LK, which tells us that the account is locked. So, before the user can log in, we have to enable the account by adding a password.</p><p>We need to type &#39;sudo passwd&#39; followed by the user account, &#39;ksanders&#39;. Hit Enter. It wants us to create a password. We&#39;re going to type &#39;1234&#39; just for now. This is just a test account, so that password is fine. Retype the password, &#39;1234&#39;. We get a warning about the password length, but the password updates successfully. Now we want to verify that, so we&#39;re going to retype ‘sudo passwd-S ksanders&#39;.</p><p>You can see now that this has changed to a PS from an LK. That indicates that a password has been unlocked and is now set up for this account. Now this user can actually log in to this profile.</p><h3 id="modify-user-accounts-04-40-05-38" tabindex="-1"><a class="header-anchor" href="#modify-user-accounts-04-40-05-38"><span>Modify User Accounts 04:40-05:38</span></a></h3><p>From time to time, you may need to modify an existing user. This is done with the usermod command. usermod&#39;s options are pretty much the same as useradd&#39;s.</p><p>For example, let&#39;s say we entered the wrong full name for the ksanders account. Her name is actually Kimberly. We can go ahead and change this by typing &#39;sudo usermod - c&#39; and then putting the correct name, &#39;Kimberly Sanders&#39;, closed single quotations, and then the user account, &#39;ksanders&#39;.</p><p>Now we want to verify those changes. We&#39;re going to go to &#39;less /etc/passwd&#39; and scroll to the bottom. We can see that &#39;Kim Sanders&#39; has actually changed to &#39;Kimberly Sanders&#39;.</p><p>You can use other options with the usermod command to change user account information, such as the username itself, the user ID, the default group, and the home directory.</p><h3 id="delete-a-user-account-05-38-07-34" tabindex="-1"><a class="header-anchor" href="#delete-a-user-account-05-38-07-34"><span>Delete a User Account 05:38-07:34</span></a></h3><p>The last thing we want to look at is the user delete, or userdel, command. This command is used to remove an account. We&#39;re going to remove the ksanders account.</p><p>There&#39;s only one option we can use with userdel, and that&#39;s the -r option. By default, if you don&#39;t use the -r option, the userdel command won&#39;t delete the user&#39;s home directory from the file system. This is because there might be intellectual property in that directory that you need to keep, even if you delete the user account. But if you do want to delete the home directory along with the user account, you can use the -r option. Let&#39;s go ahead and type this in, &#39;sudo userdel ksanders -r&#39;. We&#39;re not going to hit Enter just yet because I want to show you another way of adding and maintaining user accounts.</p><p>Sometimes, depending on the distribution, you can actually do this through a GUI or graphical user interface within Linux. Some Linux systems have them, and some don&#39;t. Sometimes you can download them. This system already has one. Let&#39;s go ahead and click on the dropdown by the power button and click Settings. Scroll down to Details and click Users. Here&#39;s our Kim Sanders account. It looks like the name didn&#39;t update to Kimberly in the GUI, but we do know it changed because we just saw that in the command line. If I were to unlock this, I could go in and manage this account.</p><p>Here, I can do things such change the account type or reset the password. It&#39;ll show me my login history as well. I&#39;m not actually going to do anything from here, but I did want to show you that because I want to show you how the account is actually removed.</p><p>If I go ahead and I run this command, now the user is deleted. If we go back and look at the ‘/etc/passwd&#39; file and scroll down, you can see the account is deleted.</p><h3 id="summary-07-34-08-00" tabindex="-1"><a class="header-anchor" href="#summary-07-34-08-00"><span>Summary 07:34-08:00</span></a></h3><p>That&#39;s it for this demonstration. In this demo, we talked about managing Linux users using the shell prompt. We looked at the useradd command, the usermod command, the passwd command, and the userdel command.</p><p>We also looked at the graphic interface that some Linux systems will use, and we looked at other options for each command.</p><h2 id="_6-7-3-linux-user-commands-and-files" tabindex="-1"><a class="header-anchor" href="#_6-7-3-linux-user-commands-and-files"><span>6.7.3 Linux User Commands and Files</span></a></h2><p>This lesson covers the following topics:</p><ul><li>User files</li><li>User management commands</li></ul><h3 id="user-files" tabindex="-1"><a class="header-anchor" href="#user-files"><span>User Files</span></a></h3><p>Linux is extremely flexible regarding where user and group information is stored. The options for storing the information are:</p><ul><li> Local file system </li><li> LDAP-compliant database </li><li> Network Information System (NIS). NIS allows many Linux computers to share a common set of user accounts, group accounts, and passwords. </li><li> A Windows domain </li></ul><p>When files are stored in the local file system, the following files are used:</p><table><thead><tr><th scope="col" class="fw-bold"> File </th><th scope="col" class="fw-bold"> Description </th></tr></thead><tbody><tr><td> /etc/passwd </td><td> The /etc/passwd file contains the user account information. Each user&#39;s information is stored in a single line on this file. There are two types of accounts in a Linux system: <ul><li> Standard accounts (these are user accounts). </li><li> System user accounts (these are used by services). </li></ul></td></tr><tr><td> /etc/shadow </td><td> The /etc/shadow file contains the users&#39; passwords in an encrypted format. The shadow file is linked to the /etc/passwd file. There are corresponding entries in both files, and they must stay synchronized. There are password and user management utilities provided by the system that allow you to edit the files and keep them synchronized. You can use the following commands to identify errors and synchronize the files: <ul><li><b class="fw-bold"> pwck </b> verifies each line in the two files and identifies discrepancies. </li><li><b class="fw-bold"> pwconv </b> adds the necessary information to synchronize the files. </li></ul></td></tr><tr><td> /etc/group </td><td> As with Active Directory, groups can be used to simplify user access to network resources. The /etc/group file contains information about each group. </td></tr></tbody></table><p>Be aware of the following configuration files when managing user accounts:</p><table><thead><tr><th scope="col" class="fw-bold"> File </th><th scope="col" class="fw-bold"> Description </th></tr></thead><tbody><tr><td> /etc/default/useradd </td><td> The /etc/default/useradd file contains default values used by the <b class="fw-bold"> useradd </b> utility when creating a user account, including: <ul><li> Group ID </li><li> Home directory </li><li> Account expiration </li><li> Default shell </li><li> Secondary group membership </li></ul></td></tr><tr><td> /etc/login.defs </td><td> The /etc/login.defs file contains: <ul><li> Values used for the group and user ID numbers </li><li> Parameters for password encryption in the shadow file </li><li> Password expiration values for user accounts </li></ul></td></tr><tr><td> /etc/skel </td><td> The /etc/skel directory contains a set of configuration file templates that are copied into a new user&#39;s home directory when it is created, including the following files: <ul><li> .bashrc </li><li> .bash_logout </li><li> .bash_profile </li><li> .kshrc </li></ul></td></tr></tbody></table><h3 id="user-management-commands" tabindex="-1"><a class="header-anchor" href="#user-management-commands"><span>User Management Commands</span></a></h3><p>Although it is possible to edit the /etc/passwd and /etc/shadow files manually to manage user accounts, doing so can disable your system. Instead, use the following commands to manage user accounts:</p><blockquote><p>If you are logged in as the root user, the commands in the table can be run by typing the applicable command and its options. However, if you are not logged in as the root user, you will need to use the sudo or su command to gain the permissions required. For example, to create a new user named Kim Sanders, you would run: <code>sudo useradd -c &quot;Kim Sanders&quot; -m ksanders</code></p></blockquote><table><thead><tr><th scope="col" class="fw-bold"> Command </th><th scope="col" class="fw-bold"> Command Function </th></tr></thead><tbody><tr><td><b class="fw-bold"> useradd </b></td><td> Create a user account. The following options override the settings as found in /etc/default/useradd: <ul><li><b class="fw-bold"> -c </b> adds a description for the account in the GECOS field of /etc/passwd. </li><li><b class="fw-bold"> -d </b> assigns an absolute pathname to a custom home directory location. </li><li><b class="fw-bold"> -D </b> displays the default values specified in the /etc/default/useradd file. </li><li><b class="fw-bold"> -e </b> specifies the date on which the user account will be disabled. </li><li><b class="fw-bold"> -f </b> specifies the number of days after a password expires until the account is permanently disabled. </li><li><b class="fw-bold"> -g </b> defines the primary group membership. </li><li><b class="fw-bold"> -M </b> defines the secondary group membership. </li><li><b class="fw-bold"> -m </b> creates the user&#39;s home directory (if it does not exist). </li><li><b class="fw-bold"> -n </b> does not create a group with the same name as the user (Red Hat and Fedora, respectively). </li><li><b class="fw-bold"> -p </b> defines the encrypted password. </li><li><b class="fw-bold"> -r </b> specifies that the user account is a system user. </li><li><b class="fw-bold"> -s </b> defines the default shell. </li><li><b class="fw-bold"> -u </b> assigns the user a custom UID. This is useful when assigning ownership of files and directories to a different user. </li></ul></td></tr><tr><td><b class="fw-bold"> passwd </b></td><td> Assign or change a password for a user. <ul><li><b class="fw-bold"> passwd </b> (without a user name or options) changes the current user&#39;s password. </li><li> Users can change their own passwords. The root user can execute all other <b class="fw-bold"> passwd </b> commands. </li></ul> Be aware of the following options: <ul><li><b class="fw-bold"> -S username </b> displays the status of the user account. LK indicates that the user account is locked, and PS indicates that the user account has a password. </li><li><b class="fw-bold"> -l </b> disables (locks) an account. This command inserts a !! before the password in the /etc/shadow file, effectively disabling the account. </li><li><b class="fw-bold"> -u </b> enables (unlocks) an account. </li><li><b class="fw-bold"> -d </b> removes the password from an account. </li><li><b class="fw-bold"> -n </b> sets the minimum number of days after a password exists before it can be changed. </li><li><b class="fw-bold"> -x </b> sets the number of days before a user must change the password (password expiration time). </li><li><b class="fw-bold"> -w </b> sets the number of days before the password expires that the user is warned. </li><li><b class="fw-bold"> -t </b> sets the number of days following the password expiration that the account will be disabled. </li></ul></td></tr><tr><td><b class="fw-bold"> usermod </b></td><td> Used to modify an existing user account; <b class="fw-bold"> usermod </b> uses several of the same switches as <b class="fw-bold"> useradd </b> . Be aware of the following switches: <ul><li><b class="fw-bold"> -c </b> changes the description for the account. </li><li><b class="fw-bold"> -l </b> renames a user account. </li><li><b class="fw-bold"> -L </b> locks the user account. This command inserts a ! before the password in the /etc/shadow file, effectively disabling the account. </li><li><b class="fw-bold"> -U </b> unlocks the user account. </li></ul></td></tr><tr><td><b class="fw-bold"> userdel </b></td><td> Remove the user from the system. Be aware of the following options: <ul><li><b class="fw-bold"> userdel <i class="fs-italicize"> [username] </i></b> (without options) removes the user account. </li><li><b class="fw-bold"> -r </b> removes the user&#39;s home directory. </li><li><b class="fw-bold"> -f </b> forces the removal of the user account even when the user is logged into the system. </li></ul></td></tr></tbody></table><h2 id="_6-7-10-linux-user-security-and-restrictions" tabindex="-1"><a class="header-anchor" href="#_6-7-10-linux-user-security-and-restrictions"><span>6.7.10 Linux User Security and Restrictions</span></a></h2><h3 id="linux-user-security-and-restrictions-00-00-00-16" tabindex="-1"><a class="header-anchor" href="#linux-user-security-and-restrictions-00-00-00-16"><span>Linux User Security and Restrictions 00:00-00:16</span></a></h3><p>If you manage Linux systems, one of your key responsibilities is ensuring user security. Today, user security is paramount, and you need to ensure that the data on your systems is secure.</p><h3 id="chage-command-00-16-01-59" tabindex="-1"><a class="header-anchor" href="#chage-command-00-16-01-59"><span>chage Command 00:16-01:59</span></a></h3><p>There are many aspects to configuring strong user security. Some are implemented by the Linux operating system itself, such as using the chage command to configure password aging, using ulimit to specify limits on resources, and so on. Other aspects involve user training, such as using strong passwords.</p><p>You need to train your users to use strong passwords. Have them create passwords that are more than eight characters in length. They should have numbers in the passwords as well as letters. They should use uppercase and lowercase characters in the password, and it should not be a word found in the dictionary. If you teach users these basic principles it&#39;ll go a long way in preventing them from using weak passwords.</p><p>Another thing you can do is configure your user passwords to expire after a period of time. This is called password aging. The longer a user has the same password, the more likely it is that it will be compromised at some point. Some organizations may mandate a maximum password age of 30 days. Others may specify 60 days. Others may even be 90 days.</p><p>You can configure password aging using the chage command, which stands for change age. The syntax for using chage is shown here. We enter chage at the shell prompt followed by the options we want to specify, and then the name of the user we want to apply the password aging policy to. You can use the option shown here with the chage command.</p><p>You can enter -m, followed by a number, which represents the minimum number of days required between password changes. You can use -M, followed by a number, which represents the maximum number of days allowed between password changes, and then the -W option, which specifies the number of warning days before the password change is required. You can use this option to specify how far in advance users need to be warned of an expiring password.</p><h3 id="user-limits-01-59-02-26" tabindex="-1"><a class="header-anchor" href="#user-limits-01-59-02-26"><span>User Limits 01:59-02:26</span></a></h3><p>Next, let&#39;s talk about configuring user limits. You can impose limits on how many times users may log concurrently into your system. You can configure how much CPU time they&#39;re allowed to use. You can configure how much system RAM they&#39;re allowed to use, and so on. This is done using a Pluggable Authentication Module (PAM) named pam_limits. You configure the pam_limits module using a file in the /etc/security directory named limits.conf.</p><h3 id="limits-conf-file-configuration-02-26-04-12" tabindex="-1"><a class="header-anchor" href="#limits-conf-file-configuration-02-26-04-12"><span>limits.conf File Configuration 02:26-04:12</span></a></h3><p>The syntax you use in the limits.conf file is shown here. First, you specify the entity you&#39;re going to apply the limit to. This could be a user, it could be a group, or you could use a wildcard character. For example, you could use an asterisk to apply a limit to all users. To apply them to a specific user, you enter the user name. To apply them to a group, you have to put an —œat— sign in front of its name to indicate that this is a group, not a user name.</p><p>Next you identify the type of limit you want to set. You can use two different values, either a hard limit or a soft limit. A hard limit is a limit that cannot be exceeded. A soft limit is a limit that the user is allowed to exceed temporarily. Next you specify the limit you want to apply. There are lots of different values you can use in the limit field. Some of the more useful ones are listed here. First is core, which specifies the size of the user&#39;s core files.</p><p>Next is data, which specifies how much room a program can use in RAM. Then we have fsize, which limits the size of the files that the user can create. We have nofile, which limits the number of open data files the user can have. You can specify CPU, which specifies a limit in terms of the amount of CPU time a single process can use. We have nproc, which limits the number of concurrent processes. We have maxlogins, which limits the number of simultaneous logins. And then we have priority, which is used to set process priority limits.</p><p>Then you specify a value for the limit you specified. In this example, suppose I want to configure the rtracy user with a hard CPU limit that limits a single process to five minutes maximum of CPU time. To do this, in the limits.conf file I would enter rtracy hard cpu 5.</p><h3 id="ulimit-command-04-12-07-00" tabindex="-1"><a class="header-anchor" href="#ulimit-command-04-12-07-00"><span>ulimit Command 04:12-07:00</span></a></h3><p>In addition to using the limits.conf file, you can also use the ulimit command at the shell prompt to configure resource limits for a given user on your Linux system. It can be used to either view the user&#39;s current resource usage limits or you can use it to set the user&#39;s current resource usage limits. It&#39;s important to note that the ulimit command only restricts access to resources for programs that are launched from the shell prompt as that user account.</p><p>If you&#39;re running graphical applications, the ulimit resource limits are not applied. Limits that you set with the command will only be applied to executables that are launched from the shell prompt. They will not be applied to applications that might be launched graphically, such as double-clicking on an icon in the graphical desktop.</p><p>Let&#39;s take a look at the syntax for using ulimit. We enter ulimit, followed by the options we want to apply, and then the limit we want to set. Some of the options you can use with ulimit are listed here. These are not all of the options. If you want to see all of them open up the ulimits man page.</p><p>These are just some of the more useful ones here. -c is used to set the maximum size of core files. If you have an application that crashes, and it needs to make a core dump, you can use this option to specify how big those dump files can be. This is usually set to zero by default so that no core dump files can be created. If you do want to enable core dump files, set it to a different value.</p><p>The next option is -f. This is used to set the maximum size of files that are created by a shell session. -n is used to set the maximum number of open files on the system. Next is the -t option, which allows us to set the maximum amount of CPU time (in seconds) a process can use. Next is the -u option, which specifies the maximum amount of processes a single user is allowed to run.</p><p>Next is the -d option, which allows us to specify the maximum size in memory that a particular process&#39;s data segment can occupy. We have -H that allows us to set a hard resource limit, and then we have -S, which allows us to set a soft resource limit.</p><p>If you want to just view the limits that are currently assigned you can use the -a option. For example, if you enter ulimit -a, it displays all the limits that have been configured for my user account. Suppose we want to limit the user to a maximum of 5 concurrent processes on the system, and we want it to be a soft limit we&#39;ll allow them to exceed it temporarily, if necessary. To do this, we would enter ulimit -S -u 5.</p><h3 id="summary-07-00-07-15" tabindex="-1"><a class="header-anchor" href="#summary-07-00-07-15"><span>Summary 07:00-07:15</span></a></h3><p>That&#39;s it for this lesson. We discussed some basic Linux user security principles that you should be aware of, such as using strong passwords, aging passwords, and configuring user limits.</p><h2 id="_6-7-11-configuring-linux-user-security-and-restrictions" tabindex="-1"><a class="header-anchor" href="#_6-7-11-configuring-linux-user-security-and-restrictions"><span>6.7.11 Configuring Linux User Security and Restrictions</span></a></h2><h3 id="configuring-user-security-and-restrictions-00-00-00-17" tabindex="-1"><a class="header-anchor" href="#configuring-user-security-and-restrictions-00-00-00-17"><span>Configuring User Security and Restrictions 00:00-00:17</span></a></h3><p>In this demonstration, we&#39;re going to talk about configuring user restrictions. We&#39;re going to look at this topic from three different aspects: password aging, setting login limits, and then setting user limits with the ulimit command.</p><h3 id="password-aging-00-17-02-22" tabindex="-1"><a class="header-anchor" href="#password-aging-00-17-02-22"><span>Password Aging 00:17-02:22</span></a></h3><p>Let&#39;s begin by talking about password aging. In today&#39;s security environment, you need to be very careful that you configure your passwords to expire after a set period of time. This is called password aging. The key thing to remember here is that the longer a user has the same password, the more it likely it is to be compromised. To prevent this, you need to configure aging for your user password. This is done with the chage command.</p><p>Let&#39;s look at the &#39;chage&#39; man page. The syntax for using chage is to enter the chage command followed by a series of options and then the user account that you want to apply those options to. Some of the more useful options you can use are listed right here. First, we have the lowercase -m option, which specifies the minimum number of days between password changes. You also have the uppercase -M option, which specifies the maximum number of days between password changes. And then we have the -w option that specifies the number of warning days a user gets before the password change is required. Go ahead and exit out of the man page.</p><p>Let&#39;s work through an example. I&#39;m going to enter &#39;chage&#39; at the shell prompt as my root user. Then I&#39;m going to specify the capital &#39;-M&#39; option to set the maximum number of days between password changes. Let&#39;s set that to two months. For many organizations, that would be way too long. A lot of organizations force password changes every 30 days. Let&#39;s specify &#39;-w&#39; to specify that a warning is given seven days before the password is about to expire, so the user has plenty of time to make the change before the password actually expires.</p><p>Then we must specify who we want to apply this change to. Let&#39;s apply it to our rmckay user account. The password is set to expire for the rmckay user in 60 days. Let&#39;s use the &#39;tail&#39; command to verify this by viewing the /etc/shadow file. Look at the very end of the file. Take a look at the rmckay user account. We can see here that the maximum number of days between password changes is 60, and the rmckay user will get seven warning days to change their password before it expires.</p><h3 id="configure-user-limits-02-22-04-57" tabindex="-1"><a class="header-anchor" href="#configure-user-limits-02-22-04-57"><span>Configure User Limits 02:22-04:57</span></a></h3><p>The next thing we need to discuss is configuring user limits. Understand that you can configure limits for how many times a user may log in, how much CPU time they use, how much memory they can use, and so on. We configure these limits in the &#39;/etc/security/limits.conf&#39; file. The syntax for this file is shown here. First, we specify the domain. The domain, as noted here, can be a user, or it could be a group.</p><p>If you want to use a group, you have to put this &#39;@&#39; sign in front of the group name to indicate that it&#39;s a group, or you can use a wild card-- listed here--to apply it to everybody. Scroll down a little bit so we can see more.</p><p>Next, we specify the type. As noted here, the type can have two different values. We can either specify a hard limit that can never be exceeded, or we can specify a soft limit that can be exceeded, but just temporarily. Then we specify the item. This is the particular thing that&#39;s going to be limited. As you can see down here, we have lots of different options for how we can limit what the item can be.</p><p>We can specify core to limit the size of the core dump files. We can specify data to configure a maximum data size and memory for the user&#39;s programs. We can specify fsize to restrict the maximum file size. We can specify nofile. We can specify the maximum number of open files. We can specify rss to set the maximum resident set size and memory. We can specify stack to set the maximum stack size. We can specify cpu and set the amount of CPU time that can be used by a single process in minutes. We can specify nproc to specify the number of concurrent processes that will be allowed. Or we can come down here and specify max logins to specify the maximum number of simultaneous logins that we allow for this user. We can also specify priority if we want to, to specify the priority to run user processes with, for this particular user account. Once we specify the item, we scroll back here, and then we specify the value for that item. This is the limit that we&#39;re going to configure.</p><p>With this in mind, let&#39;s go down here, and let&#39;s create a new limit. We&#39;re going to configure a limit for our rmckay user. I&#39;ll enter &#39;rmckay&#39; for our domain. Next, we want to specify a hard limit, and the item we want to limit is our CPU time. This is the maximum amount of CPU time that a single process run by this user can consume. We must specify how much that is. We do that in minutes. We&#39;ll specify 10 minutes. Lets save this by typing &quot;wq!&quot; and hitting Enter. To apply the change, we have to reboot the system.</p><h3 id="ulimit-command-04-57-07-01" tabindex="-1"><a class="header-anchor" href="#ulimit-command-04-57-07-01"><span>ulimit Command 04:57-07:01</span></a></h3><p>The last thing we&#39;re going to look at the in this demonstration is the ulimit command. To be honest, I don&#39;t really care much for the ulimit command. In my experience, it&#39;s not as useful as the limits.conf file that we just looked at. The ulimit command does allow you to configure limits on system resources on a per-user basis, much like we did in the limits.conf file. However, be aware that any limits that you configure with ulimit will only affect programs that are launched from within the shell prompt. If, on the other hand, the user was to come over here and launch a graphical application on the desktop, then the limits you specify with ulimit aren&#39;t applied. That&#39;s why I don&#39;t really care for it.</p><p>The syntax for ulimit is to enter &#39;ulimit&#39; followed by the options you want to use and then the limit that you want to specify. There are many different limits you can configure with ulimit. Take a look at the ulimit man page to see a full list of what you can do. For our purposes today, let&#39;s just run &#39;ulimit -a&#39; to, first of all, view the current limits for my user account. You can see what they are right here.</p><p>You can also use ulimit to set a limit. Let&#39;s set a basic limit. Let&#39;s suppose we want to set a soft limit of 100 concurrent processes for my user account. To do this, we would enter&#39; ulimit-s&#39; to set a soft limit. If we wanted to, we could use -h to set a hard limit. Then we have to specify which limit we want to use. We&#39;ll use the &#39;-u&#39; option to set the maximum number of processes available to the user. How did I know that that&#39;s the right option to use? I looked at the man page. That&#39;s what you should do as well. Then we must set that to a specific value. Let&#39;s enter &#39;100&#39;. My user account can only have a maximum of 100 concurrent processes. Enter, and the limit is applied.</p><p>If we run &#39;ulimit -a&#39; again, we see that my max user processes have dropped from 7,084 down to 100, which, depending on how the system is being used, would not be anywhere near enough. That&#39;s essentially how you use ulimit. Basically, you use ulimit to constrain what users can do so you don&#39;t end up with one user hogging all the system resources and not allowing other users on the system to access them.</p><h3 id="summary-07-01-07-18" tabindex="-1"><a class="header-anchor" href="#summary-07-01-07-18"><span>Summary 07:01-07:18</span></a></h3><p>That&#39;s it for this demonstration. In this demo, we talked about how to set up user restrictions on limits. First, we looked at password aging. We looked at login limits. Then we ended this demonstration by looking at the ulimit command.</p><h2 id="_6-7-12-linux-user-security-and-restriction-facts" tabindex="-1"><a class="header-anchor" href="#_6-7-12-linux-user-security-and-restriction-facts"><span>6.7.12 Linux User Security and Restriction Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li>User security</li><li>User security commands</li></ul><h3 id="user-security" tabindex="-1"><a class="header-anchor" href="#user-security"><span>User Security</span></a></h3><p>When considering user security, keep the following in mind:</p><ul><li> Users should be trained to use secure passwords. Secure passwords use numbers and letters and are more than seven characters in length. </li><li> Passwords should expire periodically but not too often. </li><li> Administrators can limit the resources that the user can access. </li></ul><h3 id="user-security-commands" tabindex="-1"><a class="header-anchor" href="#user-security-commands"><span>User Security Commands</span></a></h3><p>The following table describes Linux commands used to promote user security and restrictions:</p><table><thead><tr><th scope="col" class="fw-bold"> Command </th><th scope="col" class="fw-bold"> Description </th></tr></thead><tbody><tr><td><b class="fw-bold"> chage </b></td><td> Set user passwords to expire. Be aware of the following options: <ul><li><b class="fw-bold"> -M </b> sets the maximum number of days before the password expires. </li><li><b class="fw-bold"> -W </b> sets the number of days before the password expires that a warning message displays. </li><li><b class="fw-bold"> -m </b> sets the minimum number of days that must pass after a password has been changed before a user can change the password again. </li></ul></td></tr><tr><td><b class="fw-bold"> ulimit </b></td><td> Limits computer resources used for applications launched from the shell. Limits can be hard or soft limits. Soft limits can be temporarily exceeded up to the hard limit setting. Users can modify soft limits, but only the root user can modify hard limits. Options include: <ul><li><b class="fw-bold"> -c </b> limits the size of a core dump file. The value is in blocks. </li><li><b class="fw-bold"> -f </b> limits the file size of files created using the shell session. The value is in blocks. </li><li><b class="fw-bold"> -n </b> limits the maximum number of files that can be open. </li><li><b class="fw-bold"> -t </b> limits the amount of CPU time a process can use. This is set in seconds. </li><li><b class="fw-bold"> -u </b> limits the number of concurrent processes a user can run. </li><li><b class="fw-bold"> -d </b> limits the maximum amount of memory a process can use. The value is in kilobytes. </li><li><b class="fw-bold"> -H </b> sets a hard resource limit. </li><li><b class="fw-bold"> -S </b> sets a soft resource limit. </li><li><b class="fw-bold"> -a </b> displays current limits. The default shows soft limits. </li></ul></td></tr></tbody></table>',143)]))}const d=i(r,[["render",l],["__file","06.07.LinuxUsers.html.vue"]]),c=JSON.parse('{"path":"/06/06.07.LinuxUsers.html","title":"Section 6.7 Linux Users","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 6.7 Linux Users","description":"some description"},"headers":[{"level":2,"title":"6.7.1 Linux User and Group Overview","slug":"_6-7-1-linux-user-and-group-overview","link":"#_6-7-1-linux-user-and-group-overview","children":[{"level":3,"title":"Linux User and Group Overview 00:00-00:33","slug":"linux-user-and-group-overview-00-00-00-33","link":"#linux-user-and-group-overview-00-00-00-33","children":[]},{"level":3,"title":"Password File 00:33-04:02","slug":"password-file-00-33-04-02","link":"#password-file-00-33-04-02","children":[]},{"level":3,"title":"Shadow Files 04:02-08:45","slug":"shadow-files-04-02-08-45","link":"#shadow-files-04-02-08-45","children":[]},{"level":3,"title":"Group Files 08:45-10:44","slug":"group-files-08-45-10-44","link":"#group-files-08-45-10-44","children":[]},{"level":3,"title":"Summary 10:44-11:14","slug":"summary-10-44-11-14","link":"#summary-10-44-11-14","children":[]}]},{"level":2,"title":"6.7.2 Managing Linux Users","slug":"_6-7-2-managing-linux-users","link":"#_6-7-2-managing-linux-users","children":[{"level":3,"title":"Managing Linux Users 00:00-00:34","slug":"managing-linux-users-00-00-00-34","link":"#managing-linux-users-00-00-00-34","children":[]},{"level":3,"title":"Create a User Account 00:34-02:02","slug":"create-a-user-account-00-34-02-02","link":"#create-a-user-account-00-34-02-02","children":[]},{"level":3,"title":"UserAdd Command 02:02-03:29","slug":"useradd-command-02-02-03-29","link":"#useradd-command-02-02-03-29","children":[]},{"level":3,"title":"Add Passwords to User Accounts 03:29-04:40","slug":"add-passwords-to-user-accounts-03-29-04-40","link":"#add-passwords-to-user-accounts-03-29-04-40","children":[]},{"level":3,"title":"Modify User Accounts 04:40-05:38","slug":"modify-user-accounts-04-40-05-38","link":"#modify-user-accounts-04-40-05-38","children":[]},{"level":3,"title":"Delete a User Account 05:38-07:34","slug":"delete-a-user-account-05-38-07-34","link":"#delete-a-user-account-05-38-07-34","children":[]},{"level":3,"title":"Summary 07:34-08:00","slug":"summary-07-34-08-00","link":"#summary-07-34-08-00","children":[]}]},{"level":2,"title":"6.7.3 Linux User Commands and Files","slug":"_6-7-3-linux-user-commands-and-files","link":"#_6-7-3-linux-user-commands-and-files","children":[{"level":3,"title":"User Files","slug":"user-files","link":"#user-files","children":[]},{"level":3,"title":"User Management Commands","slug":"user-management-commands","link":"#user-management-commands","children":[]}]},{"level":2,"title":"6.7.10 Linux User Security and Restrictions","slug":"_6-7-10-linux-user-security-and-restrictions","link":"#_6-7-10-linux-user-security-and-restrictions","children":[{"level":3,"title":"Linux User Security and Restrictions 00:00-00:16","slug":"linux-user-security-and-restrictions-00-00-00-16","link":"#linux-user-security-and-restrictions-00-00-00-16","children":[]},{"level":3,"title":"chage Command 00:16-01:59","slug":"chage-command-00-16-01-59","link":"#chage-command-00-16-01-59","children":[]},{"level":3,"title":"User Limits 01:59-02:26","slug":"user-limits-01-59-02-26","link":"#user-limits-01-59-02-26","children":[]},{"level":3,"title":"limits.conf File Configuration 02:26-04:12","slug":"limits-conf-file-configuration-02-26-04-12","link":"#limits-conf-file-configuration-02-26-04-12","children":[]},{"level":3,"title":"ulimit Command 04:12-07:00","slug":"ulimit-command-04-12-07-00","link":"#ulimit-command-04-12-07-00","children":[]},{"level":3,"title":"Summary 07:00-07:15","slug":"summary-07-00-07-15","link":"#summary-07-00-07-15","children":[]}]},{"level":2,"title":"6.7.11 Configuring Linux User Security and Restrictions","slug":"_6-7-11-configuring-linux-user-security-and-restrictions","link":"#_6-7-11-configuring-linux-user-security-and-restrictions","children":[{"level":3,"title":"Configuring User Security and Restrictions 00:00-00:17","slug":"configuring-user-security-and-restrictions-00-00-00-17","link":"#configuring-user-security-and-restrictions-00-00-00-17","children":[]},{"level":3,"title":"Password Aging 00:17-02:22","slug":"password-aging-00-17-02-22","link":"#password-aging-00-17-02-22","children":[]},{"level":3,"title":"Configure User Limits 02:22-04:57","slug":"configure-user-limits-02-22-04-57","link":"#configure-user-limits-02-22-04-57","children":[]},{"level":3,"title":"ulimit Command 04:57-07:01","slug":"ulimit-command-04-57-07-01","link":"#ulimit-command-04-57-07-01","children":[]},{"level":3,"title":"Summary 07:01-07:18","slug":"summary-07-01-07-18","link":"#summary-07-01-07-18","children":[]}]},{"level":2,"title":"6.7.12 Linux User Security and Restriction Facts","slug":"_6-7-12-linux-user-security-and-restriction-facts","link":"#_6-7-12-linux-user-security-and-restriction-facts","children":[{"level":3,"title":"User Security","slug":"user-security","link":"#user-security","children":[]},{"level":3,"title":"User Security Commands","slug":"user-security-commands","link":"#user-security-commands","children":[]}]}],"git":{"updatedTime":1735698907000},"filePathRelative":"06/06.07.LinuxUsers.md"}');export{d as comp,c as data};
