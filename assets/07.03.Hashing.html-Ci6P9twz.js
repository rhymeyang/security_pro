import{_ as i,c as h,b as s,a as e,d as a,o as n}from"./app-C-rfiiRd.js";const l="/security_pro/images/07/get_hash.jpg",o={};function r(d,t){return n(),h("div",null,t[0]||(t[0]=[s("<p>As you study this section, answer the following questions:</p><ul><li> What is the output of hashing called? </li><li> What are the five characteristics of a hash function? </li><li> What are some common uses for hashing? </li><li> What type of attack takes advantage of hash collisions? </li><li> What are the main hashing algorithms used? </li></ul><p>In this section, you will learn to:</p><ul><li>Use hashes.</li><li>Compare MD5 hashes.</li></ul><p>The key terms for this section include:</p>",5),e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Term "),e("th",{scope:"col",class:"fw-bold"}," Definition ")])]),e("tbody",null,[e("tr",null,[e("td",null," Hash "),e("td",null," A function that converts a variable-length string into a compressed, fixed-length value known as a message digest or hash. ")]),e("tr",null,[e("td",null," Hash collision "),e("td",null," A hash collision occurs when two files generate the same hash. ")]),e("tr",null,[e("td",null," Rainbow table "),e("td",null," A rainbow table is a table of passwords and their generated hashes. ")])])],-1),e("p",null,"This section helps you prepare for the following certification exam objectives:",-1),e("table",{class:"objectives"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Exam "),e("th",{scope:"col",class:"fw-bold"}," Objective ")])]),e("tbody",null,[e("tr",null,[e("td",null," TestOut Security Pro "),e("td",null,[a(" 4.0 Data Security "),e("blockquote",null," 4.2 Implement Encryption Technologies ")])]),e("tr",null,[e("td",null," CompTIA Security+ SY0-601 "),e("td",null,[a(" 1.2 Given a scenario, analyze potential indicators to determine the type of attack. "),e("ul",null,[e("li",null,[a(" Cryptographic attacks "),e("ul",null,[e("li",null," Collision ")])])]),a(" 1.6 Explain the security concerns associated with various types of vulnerabilities. "),e("ul",null,[e("li",null,[a(" Weak configuration "),e("ul",null,[e("li",null," Weak encryption ")])])]),e("p",null," 2.1 Explain the importance of security concepts in an enterprise environment. "),e("ul",null,[e("li",null," Hashing ")]),e("p",null," 2.8 Summarize the basics of cryptographic concepts. "),e("ul",null,[e("li",null," Hashing ")])])])])],-1),s('<h2 id="_7-3-1-hashing" tabindex="-1"><a class="header-anchor" href="#_7-3-1-hashing"><span>7.3.1 Hashing</span></a></h2><h3 id="hashing-00-00-00-20" tabindex="-1"><a class="header-anchor" href="#hashing-00-00-00-20"><span>Hashing 00:00-00:20</span></a></h3><p>When you&#39;re transferring or downloading files, it&#39;s important to know that the file is legitimate and hasn&#39;t been altered in any way. This is what hashes are for. In this lesson, we&#39;ll discuss how hashing works, some common ways they&#39;re used, what hashing collisions are, and how to reduce collisions.</p><h3 id="how-hashes-work-00-20-01-12" tabindex="-1"><a class="header-anchor" href="#how-hashes-work-00-20-01-12"><span>How Hashes Work 00:20-01:12</span></a></h3><p>Hashing is the process of generating a fixed-length hexadecimal string value from any file type or data.</p><p>Let&#39;s look at an example. We have an image file that we can run through a hashing algorithm and get a hexadecimal output. This output is the hash. All hashing functions are one-way functions. This means that the hash cannot be reversed. In other words, you can&#39;t decipher a hash and find out what the original data was.</p><p>A proper hash function has five characteristics. First, it should be deterministic, meaning the same data will always generate the same hash. Next, the hash generation needs to be quick and efficient, and it can&#39;t be reverse-engineered. The hash function should also be collision-resistant and exhibit the avalanche effect, meaning that that if even one tiny bit in the data is changed, the new hash will be completely different.</p><h3 id="avalanche-effect-01-12-01-29" tabindex="-1"><a class="header-anchor" href="#avalanche-effect-01-12-01-29"><span>Avalanche Effect 01:12-01:29</span></a></h3><p>For example, using the MD5 algorithm, the hash for the message -Hello world!— would look like this. If we capitalize the —W— and generate a new hash using the same algorithm, we get a very different hash.</p><p>There are a few reasons why you may want to generate a hash for some of your data,</p><h3 id="hashing-uses-01-29-01-36" tabindex="-1"><a class="header-anchor" href="#hashing-uses-01-29-01-36"><span>Hashing Uses 01:29-01:36</span></a></h3><p>such as verifying file integrity, providing digital signatures, and verifying passwords. Let&#39;s look at each in more detail.</p><h3 id="verifying-file-integrity-01-36-02-20" tabindex="-1"><a class="header-anchor" href="#verifying-file-integrity-01-36-02-20"><span>Verifying File Integrity 01:36-02:20</span></a></h3><p>We download files from the internet all the time. When you do this, you&#39;re not always sure that a file is safe and hasn&#39;t been tampered with. By providing a hash of the original file, you can verify that the file you downloaded is legitimate.</p><p>For example, when an application developer finalizes their program, they can generate a hash of the app and the upload the app to their website along with the generated hash.</p><p>Later, this company&#39;s website gets hacked, and the hacker replaces the program file with another malicious program by the same name.</p><p>When a customer downloads the file, they can generate a hash and compare it to the original hash. Because the app file has been replaced, the hashes won&#39;t match, and they&#39;ll know that the file has been changed and they shouldn&#39;t run it.</p><h3 id="digital-signatures-02-20-02-41" tabindex="-1"><a class="header-anchor" href="#digital-signatures-02-20-02-41"><span>Digital Signatures 02:20-02:41</span></a></h3><p>Hashing is also used when creating a digital signature for an important message. Using a hash of the data along with our private encryption key, a digital signature is created. This is the equivalent of signing our name to a physical document. When the recipient receives the message, they can verify the digital signature to ensure that the data or message is legitimate.</p><h3 id="password-verification-02-41-03-04" tabindex="-1"><a class="header-anchor" href="#password-verification-02-41-03-04"><span>Password Verification 02:41-03:04</span></a></h3><p>Hashing is also used to protect passwords. Instead of sending the password in clear text, only a hash of the password is sent. For example, when you use a Microsoft account to sign in to a Windows system, your password is first encrypted using a special hashing algorithm called NTLM. That hash is then checked by Windows, and if it matches, you&#39;re signed in.</p><h3 id="salting-the-hash-03-04-04-05" tabindex="-1"><a class="header-anchor" href="#salting-the-hash-03-04-04-05"><span>Salting the Hash 03:04-04:05</span></a></h3><p>One of the problems with using hashed passwords is that several online sites have collected massive databases containing a hash for tens of million of possible passwords. Once a hash has been captured, it can be compared with the hashes found in the database, quickly resulting in the password used to create the hash. To keep this from happening, most hashes now also incorporate what&#39;s known as a salt.</p><p>Salting the hash means that a random number of characters are added to the password before the hash is created.</p><p>For example, if the password to be hashed was this, a salt such as this may be added. The string to be hashed becomes this. Since the salt is randomly generated each time, even if the same password is used, and can be varying lengths, it&#39;s virtually impossible to create a database containing all the possible salted passwords.</p><p>Using hashing helps meet the goals of Information Security by providing file integrity, non-repudiation, confidentiality, and authentication.</p><h3 id="hash-collisions-04-05-05-13" tabindex="-1"><a class="header-anchor" href="#hash-collisions-04-05-05-13"><span>Hash Collisions 04:05-05:13</span></a></h3><p>Hashing is a very good file verification method, but it&#39;s not 100% foolproof. Depending on the algorithm used, there&#39;s a potential for hash collisions. A hash collision occurs when two completely different files generate the same hash. A rainbow table attack takes advantage of this weakness. Let&#39;s go through the process.</p><p>A rainbow table is a table of passwords and their generated hashes. A hacker can use this table to match a captured hash with one in the table. When a match is found, the hacker knows the password—&quot;or, in the case of a collision, they&#39;ll at least know a password that will work.</p><p>For example, let&#39;s say a user&#39;s sign-in password is TestOut, which generates this hash. In the hacker&#39;s rainbow table, the password of SecurityPro has also generated the same hash value. This is a hash collision. Taking advantage of this collision, the hacker can gain access to the system using the password of SecurityPro, since it will send the same hash value that the real password uses.</p><p>You can reduce the risk of a hash collision by using an algorithm that will generate a longer hash and by salting the hash.</p><h3 id="summary-05-13-05-36" tabindex="-1"><a class="header-anchor" href="#summary-05-13-05-36"><span>Summary 05:13-05:36</span></a></h3><p>That&#39;s it for this lesson. We&#39;ve discussed how hashing works, including the characteristics of a proper hash function. We reviewed some of the ways hashing is used, including verifying file integrity, digital signatures, and passwords. We ended by discussing hash collisions and how hackers can exploit them using rainbow tables.</p><h2 id="_7-3-2-hashing-algorithms" tabindex="-1"><a class="header-anchor" href="#_7-3-2-hashing-algorithms"><span>7.3.2 Hashing Algorithms</span></a></h2><h3 id="hashing-algorithms-00-00-00-37" tabindex="-1"><a class="header-anchor" href="#hashing-algorithms-00-00-00-37"><span>Hashing Algorithms 00:00-00:37</span></a></h3><p>Hashing is the process of generating a fixed-length hexadecimal string value from any file type or data. That output is often referred to as the hash or message digest. Hashing can be used to verify file integrity, create digital signatures, provide password verification, and more.</p><p>There are different hashing algorithms or functions for different uses. The most common algorithms are MD5 and SHA, and two alternative hash functions are HMAC and RIPEMD. In this lesson, we&#39;ll look at these algorithms and discuss how they work.</p><h3 id="md5-00-37-01-07" tabindex="-1"><a class="header-anchor" href="#md5-00-37-01-07"><span>MD5 00:37-01:07</span></a></h3><p>Message-Digest Algorithm version 5, commonly called MD5, was developed by Ron Rivest in 1991. This hash function generates a 128-bit message digest, but it can&#39;t be used for security purposes any longer. One of the key features of a proper hash function is that it&#39;s resistant to hash collisions, but the MD5 algorithm is extremely susceptible to collisions. Today, MD5 is mainly used to verify file integrity.</p><h3 id="secure-hash-algorithm-01-07-02-10" tabindex="-1"><a class="header-anchor" href="#secure-hash-algorithm-01-07-02-10"><span>Secure Hash Algorithm 01:07-02:10</span></a></h3><p>The Secure Hash Algorithm, or SHA, is a family of hashes that are government-standard algorithms and were published by NIST starting in 1993. SHA-2 was published in 2001 and has become one of the standard hash functions in use today. We see it implemented frequently in security communications protocols such as TLS and SSL, PGP, SSH, and IPSec. This algorithm can generate message digests that are 224, 256, 384, or 512 bits in size.</p><p>SHA-3 was released in 2015, but it&#39;s not meant to replace SHA-2, as it&#39;s still a secure hashing method. Because SHA-2 is so heavily integrated in our standard online transactions and communications, it doesn&#39;t make sense to switch over yet. SHA-3 uses a completely different process than SHA-2, but the message digests are compatible with SHA-2. What this means for us is that when SHA-2 is inevitably compromised, SHA-3 will be available to take over immediately.</p><h3 id="hash-based-message-authentication-code-02-10-02-40" tabindex="-1"><a class="header-anchor" href="#hash-based-message-authentication-code-02-10-02-40"><span>Hash-Based Message Authentication Code 02:10-02:40</span></a></h3><p>Hash-Based Message Authentication Code, or HMAC, is a type of message authentication code. Like a digital signature, HMAC allows a user to verify that a file or message is legitimate.</p><p>When using HMAC, the message sender provides a secret key that&#39;s used with a hash function, such as MD5 or SHA, to create a message authentication code. The recipient then uses the key to verify both the integrity and authenticity of the message.</p><h3 id="ripe-message-digest-02-40-03-06" tabindex="-1"><a class="header-anchor" href="#ripe-message-digest-02-40-03-06"><span>RIPE Message Digest 02:40-03:06</span></a></h3><p>In 1992, a new hash function called RIPE Message Digest, or RIPEMD, was developed based on the MD4 algorithm. In 1996, due to security issues discovered in RIPEMD, a group of Belgian researchers published four updated algorithms. While it&#39;s not as popular as SHA-2, the 160-bit function is used frequently with Bitcoin and other cryptocurrencies.</p><h3 id="summary-03-06-03-37" tabindex="-1"><a class="header-anchor" href="#summary-03-06-03-37"><span>Summary 03:06-03:37</span></a></h3><p>That&#39;s it for this lesson. In this lesson, we discussed MD5 and SHA, the most popular hashing functions. MD5 is mostly used for file verification, while SHA-2 is widely used in many security communications protocols. We also discussed two alternative hashing functions, HMAC and RIPEMD. HMAC is used for message or file verification, and RIPEMD is mostly used with Bitcoin and other cryptocurrencies.</p><h2 id="_7-3-3-hashing-facts" tabindex="-1"><a class="header-anchor" href="#_7-3-3-hashing-facts"><span>7.3.3 Hashing Facts</span></a></h2><p>This lesson covers the following topics:</p><ul><li> How hashing works </li><li> Hashing uses </li><li> Hash collisions </li><li> Hashing algorithms </li><li> Comparing hash values </li></ul><h3 id="how-hashing-works" tabindex="-1"><a class="header-anchor" href="#how-hashing-works"><span>How Hashing Works</span></a></h3><p>Hashing is the process of generating a fixed-length hexadecimal string value from any file type or data. Hashes can be generated from messages, image files, data files, and most other types of data. This output is known as the message digest or hash. The output size varies depending on the algorithm being used.</p><p>A proper hash function should have the following characteristics:</p>',55),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Characteristic "),e("th",{scope:"col",class:"fw-bold"}," Description ")])]),e("tbody",null,[e("tr",null,[e("td",null," Deterministic "),e("td",null," The same data always generates the same hash. ")]),e("tr",null,[e("td",null," Quick and efficient "),e("td",null," Generating the hash should be quick and not use too many resources. The hash should also be generated using the entire message or data, not just a small piece of it. ")]),e("tr",null,[e("td",null," One-way "),e("td",null," The hash cannot be reverse engineered. ")]),e("tr",null,[e("td",null," Collision resistant "),e("td",null," Two different pieces of data should not generate the same hash. ")]),e("tr",null,[e("td",null," Avalanche effect "),e("td",null," Changing any bit of data will result in a completely different hash. ")])])],-1),e("h3",{id:"hashing-uses",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hashing-uses"},[e("span",null,"Hashing Uses")])],-1),e("p",null,"Hashing is often used for the following:",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Hash Use "),e("th",{scope:"col",class:"fw-bold"}," Description ")])]),e("tbody",null,[e("tr",null,[e("td",null," File Integrity "),e("td",null,[a(" Hashes are often used to prove the integrity of downloaded files. When a file is uploaded to a site, a hash can be generated. When the recipient downloads the file, they can create a hash of that file. If the recipient's hash matches the hash of the original file, you know that: "),e("ul",null,[e("li",null," The downloaded file is complete (no missing parts). "),e("li",null," The downloaded file was not corrupted during transfer. "),e("li",null," The downloaded file is the same as the original and has not been altered by inserting malicious code or replaced with a virus or malware file. ")]),e("br"),a(" For this reason, files available for download are typically not encrypted as the hash proves their data integrity. ")])]),e("tr",null,[e("td",null," Digital signature "),e("td",null," Hashes are a critical piece of a digital signature. The creator combines a hash of the data along with their private key to generate the digital signature. ")]),e("tr",null,[e("td",null," Secure logon credential exchange "),e("td",null,[a(" Hashes can be used to secure logon credentials during an exchange. The password is used as the key to perform a hash on a text value, and only the hashed value is passed (not the password). The receiving host uses the same method to compare the hashes to verify the identity of the user. Examples of protocols that use this method are: "),e("ul",null,[e("li",null," Challenge-Handshake Authentication Protocol (CHAP) "),e("li",null," New Technology LAN Manager (NTLM) "),e("li",null," Kerberos ")]),e("br"),a(" Passwords can be further secured by salting the hash. This is the process of adding random characters at the beginning or end of the password to generate a completely different hash. If a hacker intercepts the hash, they also must know which portion is the salt before beginning to crack the hash. ")])])])],-1),e("h3",{id:"hash-collisions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hash-collisions"},[e("span",null,"Hash Collisions")])],-1),e("p",null,"Hashing is a good file verification method, but it is not perfect. Depending on the algorithm used, there is a potential for hash collisions. A hash collision occurs when two completely different files generate the same hash. Rainbow table attacks take advantage of hash collisions.",-1),e("ul",null,[e("li",null," A rainbow table is a table of passwords and their generated hashes. A hacker can use this table to try to match hashes instead of the actual password. "),e("li",null," Hash collisions can be reduced using an algorithm that generates a longer hash and by salting the hash. Salt is random data that is used as an additional input to the function that hashes data. ")],-1),e("h3",{id:"hashing-algorithms",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hashing-algorithms"},[e("span",null,"Hashing Algorithms")])],-1),e("p",null,"Depending on the use, there are different hashing algorithms which can be used.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Hashing Algorithm "),e("th",{scope:"col",class:"fw-bold"}," Description ")])]),e("tbody",null,[e("tr",null,[e("td",null,[a(" Message-Digest "),e("br"),a(" Algorithm 5 "),e("br"),a(" (MD5) ")]),e("td",null,[a(" MD5 was developed by Ron Rivest in 1991. "),e("ul",null,[e("li",null," MD5 generates a 128-bit message digest. "),e("li",null," Many security vulnerabilities have been discovered with MD5. As such, it is no longer viable for security purposes. "),e("li",null," MD5 is extremely susceptible to hash collisions. "),e("li",null," MD5 is mainly used for file integrity. ")])])]),e("tr",null,[e("td",null,[a(" Secure Hash Algorithm "),e("br"),a(" (SHA) ")]),e("td",null,[a(" SHA is a family of hashes. "),e("ul",null,[e("li",null," SHA is a government standard. "),e("li",null," First published in 1991 by the National Institute of Standards and Technology (NIST). "),e("li",null," SHA-2 was published in 2001 and has become one of the standard hash functions in use today. "),e("li",null," Used in many security protocols such as TLS, SSL, PGP, SSH, and IPSec. "),e("li",null," Generates message digests that are 224, 256, 384, or 512 bits in size. ")]),e("br"),a(" SHA-3 was published in 2015, but is not meant to replace SHA-2. SHA-2 has yet to be cracked. NIST wanted an alternative available for people to use. Message digests generated by SHA-3 are fully compatible with SHA-2. ")])]),e("tr",null,[e("td",null,[a(" Hash-Based Message Authentication Code "),e("br"),a(" (HMAC) ")]),e("td",null,[a(" HMAC is a type of message authentication code. Like a digital signature, HMAC allows a user to verify that a file or message is legitimate. "),e("ul",null,[e("li",null," The message sender provides a secret key that is used with a hash function, such as MD5 or SHA, to create a message authentication code. "),e("li",null," The recipient then uses the key to verify both the integrity and authenticity of the message. ")])])]),e("tr",null,[e("td",null,[a(" RACE Integrity Primitives Evaluation Message Digest "),e("br"),a(" (RIPEMD) ")]),e("td",null,[a(" RIPEMD (RACE Integrity Primitives Evaluation Message Digest, or RIPE Message Digest) is a family of cryptographic hash functions that was first developed in 1992 as part of the EU's RIPE project. "),e("br"),e("br"),a(" The first version was based on the MD4 function. In 1996, in response to security issues discovered in the first version, Belgian researchers developed four updated algorithms. "),e("ul",null,[e("li",null," RIPEMD-128 "),e("li",null," RIPEMD-160 "),e("li",null," RIPEMD-256 "),e("li",null," RIPEMD-320 ")]),e("br"),a(" RIPEMD is not as popular as SHA-2, but is used frequently with Bitcoin and other cryptocurrencies. ")])])])],-1),s('<h3 id="comparing-hash-values" tabindex="-1"><a class="header-anchor" href="#comparing-hash-values"><span>Comparing Hash Values</span></a></h3><p>Being able to compare the hash of a file after it&#39;s been downloaded to a known good hash helps verify that the file was not altered in transit.</p><h3 id="get-filehash" tabindex="-1"><a class="header-anchor" href="#get-filehash"><span>Get-FileHash</span></a></h3><h4 id="get-filehash-download-zip-a-md5" tabindex="-1"><a class="header-anchor" href="#get-filehash-download-zip-a-md5"><span>Get-FileHash Download.zip -a md5</span></a></h4><p>Sample output:</p><p><img src="'+l+`" alt="Get-FileHash Example Output"></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">Get-Content</span>
<span class="line">Get-Content Download.txt</span>
<span class="line"><span class="token parameter variable">-eq</span></span>
<span class="line">“39C784349F4ZDB44A84C7958C246E394” <span class="token parameter variable">-eq</span> “4A84C7958C246E39439C784349F4ZDB4”</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output will be “True” if the hashes match or “False” if they do not match.</p><h2 id="_7-3-4-using-hashes" tabindex="-1"><a class="header-anchor" href="#_7-3-4-using-hashes"><span>7.3.4 Using Hashes</span></a></h2><h3 id="using-hashes-00-00-00-39" tabindex="-1"><a class="header-anchor" href="#using-hashes-00-00-00-39"><span>Using Hashes 00:00-00:39</span></a></h3><p>In this demonstration, we&#39;ll explore how hashing works. I&#39;ve already downloaded a hashing utility that does both MD5 and SHA-1 hashes. It&#39;s called Microsoft File Checksum Integrity Verifier. I&#39;ve placed it at the root of C: in a folder named FCIV.</p><p>As you can see, I have the fciv.exe file, the README.txt that tells you about the file and how to use it, and a little TestOut.txt file that I&#39;ve created. The name of the executable is obviously fciv.exe, and it uses an MD5 hashing algorithm by default, but it can also use SHA-1.</p><h3 id="create-a-hash-00-39-01-22" tabindex="-1"><a class="header-anchor" href="#create-a-hash-00-39-01-22"><span>Create a Hash 00:39-01:22</span></a></h3><p>Let&#39;s practice creating a hash of a file. I have this Testout.txt file, and I&#39;ve entered some text into it. It just says &quot;TestOut.&quot; Let&#39;s go ahead and close the file.</p><p>The first thing we need to do is go to the command prompt. This hashing tool runs off the command prompt. We need to do is get to the correct folder, FCIV at the root of C. Now we&#39;re in the right folder, and we can check the directory. You can see the files in the directory, the executable, and the ReadMe. If we open the ReadMe file, it&#39;ll show you some of the information about using this file. It shows you some features, and it shows you the syntax for using these features.</p><p>Let&#39;s go back. We&#39;re not going to do anything complicated today. We&#39;re going to keep it simple and just create some hashes.</p><h3 id="md5-hash-01-22-03-33" tabindex="-1"><a class="header-anchor" href="#md5-hash-01-22-03-33"><span>MD5 Hash 01:22-03:33</span></a></h3><p>First, we&#39;re going to do an MD5 hash. By default, this tool will hash an MD5, and you don&#39;t have to state MD5. (You can, but you don&#39;t have to.) Let&#39;s go ahead and hash our text file. Let&#39;s type in ‘fciv.exe&#39;. Then all we have to do is type ‘testout.txt&#39;. You can see it&#39;s just created our hash for us. The resulting hash is displayed, and MD5 is a 128-bit hashing algorithm, so the output is composed of 128 zeroes and ones. To make it easier to read, the output is then converted from binary to hexadecimal notation. Each hexadecimal character is four bits long, so the hash is composed of 32 hexadecimal characters.</p><p>Let&#39;s try to modify our Testout.txt file. Suppose that someone has intercepted this file in transit and modified it. Let&#39;s just add a period here, at the end. We&#39;ll save it and close the file. This isn&#39;t much of a change.</p><p>Let&#39;s say maybe the attacker tried to modify the file without being too obvious. We&#39;ll run the hash again. Just press the up arrow and press Enter. We can see that we get a completely different hash value. It&#39;s not even close to the original one--it&#39;s completely different. If you&#39;re using hashing as part of your cryptographic solution, you&#39;ll know if data has been modified. The hashes will be marked completely differently.</p><p>Let&#39;s go back to the file and change it back to the way it was. If we run the hash again, notice the hash is now back to its original value. The fact that it was modified in the past doesn&#39;t affect the hash value. The hashing algorithm only evaluates the current content of the data. In this case, the current content is identical to what we had originally hashed, so the hash value is the same. Identical data going into the same hashing algorithm will produce the exact same output.</p><p>Let&#39;s go ahead and rename the Testout file from Testout to Testout1. We&#39;re going to just add a 1 here, and that&#39;s it. We have to change this a little bit, just add a 1. Notice that the hash is identical again. The hashing algorithm doesn&#39;t care what label you put on the data. It only evaluates the data.</p><h3 id="sha-1-hash-03-33-04-42" tabindex="-1"><a class="header-anchor" href="#sha-1-hash-03-33-04-42"><span>SHA-1 Hash 03:33-04:42</span></a></h3><p>Let&#39;s look at an example of SHA, or secure hashing algorithm. Specifically, we&#39;re going to use SHA-1. This is similar to MD5. In this tool, we&#39;ll use a similar syntax, but we actually have to specify SHA-1.</p><p>Let&#39;s go back, and we&#39;re going to change our file back to TestOut. Instead of entering the fciv.exe, we actually have to specify our SHA-1, because, by default, it does MD5. We have to specify that we want to use SHA-1. Let&#39;s go ahead and type in ‘fciv.exe sha-1 testout.txt&#39;.</p><p>All right, so now we can see our file, our SHA-1 hash. Similarly, if we go in and edit our Testout text and add the period, just like we did with MD5, and we save and close, run the same hash again, you can see, we got a different hash, just like with MD5. If we change it back, get rid of the period at the end, save, and run the command again, the same thing occurs as with MD5: we&#39;ll get the original hash back.</p><h3 id="summary-04-42-04-54" tabindex="-1"><a class="header-anchor" href="#summary-04-42-04-54"><span>Summary 04:42-04:54</span></a></h3><p>That&#39;s it for this demonstration. This demo provided an overview of how hashing works. We reviewed hashing with MD5 and SHA-1.</p>`,28)]))}const u=i(o,[["render",r],["__file","07.03.Hashing.html.vue"]]),g=JSON.parse('{"path":"/07/07.03.Hashing.html","title":"Section 7.3 Hashing","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 7.3 Hashing","description":"some description"},"headers":[{"level":2,"title":"7.3.1 Hashing","slug":"_7-3-1-hashing","link":"#_7-3-1-hashing","children":[{"level":3,"title":"Hashing 00:00-00:20","slug":"hashing-00-00-00-20","link":"#hashing-00-00-00-20","children":[]},{"level":3,"title":"How Hashes Work 00:20-01:12","slug":"how-hashes-work-00-20-01-12","link":"#how-hashes-work-00-20-01-12","children":[]},{"level":3,"title":"Avalanche Effect 01:12-01:29","slug":"avalanche-effect-01-12-01-29","link":"#avalanche-effect-01-12-01-29","children":[]},{"level":3,"title":"Hashing Uses 01:29-01:36","slug":"hashing-uses-01-29-01-36","link":"#hashing-uses-01-29-01-36","children":[]},{"level":3,"title":"Verifying File Integrity 01:36-02:20","slug":"verifying-file-integrity-01-36-02-20","link":"#verifying-file-integrity-01-36-02-20","children":[]},{"level":3,"title":"Digital Signatures 02:20-02:41","slug":"digital-signatures-02-20-02-41","link":"#digital-signatures-02-20-02-41","children":[]},{"level":3,"title":"Password Verification 02:41-03:04","slug":"password-verification-02-41-03-04","link":"#password-verification-02-41-03-04","children":[]},{"level":3,"title":"Salting the Hash 03:04-04:05","slug":"salting-the-hash-03-04-04-05","link":"#salting-the-hash-03-04-04-05","children":[]},{"level":3,"title":"Hash Collisions 04:05-05:13","slug":"hash-collisions-04-05-05-13","link":"#hash-collisions-04-05-05-13","children":[]},{"level":3,"title":"Summary 05:13-05:36","slug":"summary-05-13-05-36","link":"#summary-05-13-05-36","children":[]}]},{"level":2,"title":"7.3.2 Hashing Algorithms","slug":"_7-3-2-hashing-algorithms","link":"#_7-3-2-hashing-algorithms","children":[{"level":3,"title":"Hashing Algorithms 00:00-00:37","slug":"hashing-algorithms-00-00-00-37","link":"#hashing-algorithms-00-00-00-37","children":[]},{"level":3,"title":"MD5 00:37-01:07","slug":"md5-00-37-01-07","link":"#md5-00-37-01-07","children":[]},{"level":3,"title":"Secure Hash Algorithm 01:07-02:10","slug":"secure-hash-algorithm-01-07-02-10","link":"#secure-hash-algorithm-01-07-02-10","children":[]},{"level":3,"title":"Hash-Based Message Authentication Code 02:10-02:40","slug":"hash-based-message-authentication-code-02-10-02-40","link":"#hash-based-message-authentication-code-02-10-02-40","children":[]},{"level":3,"title":"RIPE Message Digest 02:40-03:06","slug":"ripe-message-digest-02-40-03-06","link":"#ripe-message-digest-02-40-03-06","children":[]},{"level":3,"title":"Summary 03:06-03:37","slug":"summary-03-06-03-37","link":"#summary-03-06-03-37","children":[]}]},{"level":2,"title":"7.3.3 Hashing Facts","slug":"_7-3-3-hashing-facts","link":"#_7-3-3-hashing-facts","children":[{"level":3,"title":"How Hashing Works","slug":"how-hashing-works","link":"#how-hashing-works","children":[]},{"level":3,"title":"Hashing Uses","slug":"hashing-uses","link":"#hashing-uses","children":[]},{"level":3,"title":"Hash Collisions","slug":"hash-collisions","link":"#hash-collisions","children":[]},{"level":3,"title":"Hashing Algorithms","slug":"hashing-algorithms","link":"#hashing-algorithms","children":[]},{"level":3,"title":"Comparing Hash Values","slug":"comparing-hash-values","link":"#comparing-hash-values","children":[]},{"level":3,"title":"Get-FileHash","slug":"get-filehash","link":"#get-filehash","children":[]}]},{"level":2,"title":"7.3.4 Using Hashes","slug":"_7-3-4-using-hashes","link":"#_7-3-4-using-hashes","children":[{"level":3,"title":"Using Hashes 00:00-00:39","slug":"using-hashes-00-00-00-39","link":"#using-hashes-00-00-00-39","children":[]},{"level":3,"title":"Create a Hash 00:39-01:22","slug":"create-a-hash-00-39-01-22","link":"#create-a-hash-00-39-01-22","children":[]},{"level":3,"title":"MD5 Hash 01:22-03:33","slug":"md5-hash-01-22-03-33","link":"#md5-hash-01-22-03-33","children":[]},{"level":3,"title":"SHA-1 Hash 03:33-04:42","slug":"sha-1-hash-03-33-04-42","link":"#sha-1-hash-03-33-04-42","children":[]},{"level":3,"title":"Summary 04:42-04:54","slug":"summary-04-42-04-54","link":"#summary-04-42-04-54","children":[]}]}],"git":{"updatedTime":1736185323000},"filePathRelative":"07/07.03.Hashing.md"}');export{u as comp,g as data};
